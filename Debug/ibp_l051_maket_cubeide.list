
ibp_l051_maket_cubeide.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003c98  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003dc4  08003dc4  00020004  2**0
                  CONTENTS
  4 .ARM          00000008  08003dc4  08003dc4  00013dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003dcc  08003dcc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003dcc  08003dcc  00013dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003dd0  08003dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08003dd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000290  20000004  08003dd8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000294  08003dd8  00020294  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011204  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029d4  00000000  00000000  00031230  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001170  00000000  00000000  00033c08  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00034d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000131f0  00000000  00000000  00035d60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f990  00000000  00000000  00048f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007362d  00000000  00000000  000588e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cbf0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003dc0  00000000  00000000  000cbf88  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000004 	.word	0x20000004
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003d40 	.word	0x08003d40

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000008 	.word	0x20000008
 8000104:	08003d40 	.word	0x08003d40

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b082      	sub	sp, #8
 800043c:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800043e:	003b      	movs	r3, r7
 8000440:	0018      	movs	r0, r3
 8000442:	2308      	movs	r3, #8
 8000444:	001a      	movs	r2, r3
 8000446:	2100      	movs	r1, #0
 8000448:	f003 fc72 	bl	8003d30 <memset>

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc.Instance = ADC1;
 800044c:	4b37      	ldr	r3, [pc, #220]	; (800052c <MX_ADC_Init+0xf4>)
 800044e:	4a38      	ldr	r2, [pc, #224]	; (8000530 <MX_ADC_Init+0xf8>)
 8000450:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8000452:	4b36      	ldr	r3, [pc, #216]	; (800052c <MX_ADC_Init+0xf4>)
 8000454:	2200      	movs	r2, #0
 8000456:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000458:	4b34      	ldr	r3, [pc, #208]	; (800052c <MX_ADC_Init+0xf4>)
 800045a:	2280      	movs	r2, #128	; 0x80
 800045c:	05d2      	lsls	r2, r2, #23
 800045e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000460:	4b32      	ldr	r3, [pc, #200]	; (800052c <MX_ADC_Init+0xf4>)
 8000462:	2200      	movs	r2, #0
 8000464:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000466:	4b31      	ldr	r3, [pc, #196]	; (800052c <MX_ADC_Init+0xf4>)
 8000468:	2200      	movs	r2, #0
 800046a:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800046c:	4b2f      	ldr	r3, [pc, #188]	; (800052c <MX_ADC_Init+0xf4>)
 800046e:	2201      	movs	r2, #1
 8000470:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000472:	4b2e      	ldr	r3, [pc, #184]	; (800052c <MX_ADC_Init+0xf4>)
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000478:	4b2c      	ldr	r3, [pc, #176]	; (800052c <MX_ADC_Init+0xf4>)
 800047a:	2220      	movs	r2, #32
 800047c:	2100      	movs	r1, #0
 800047e:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000480:	4b2a      	ldr	r3, [pc, #168]	; (800052c <MX_ADC_Init+0xf4>)
 8000482:	2221      	movs	r2, #33	; 0x21
 8000484:	2100      	movs	r1, #0
 8000486:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000488:	4b28      	ldr	r3, [pc, #160]	; (800052c <MX_ADC_Init+0xf4>)
 800048a:	2200      	movs	r2, #0
 800048c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800048e:	4b27      	ldr	r3, [pc, #156]	; (800052c <MX_ADC_Init+0xf4>)
 8000490:	22c2      	movs	r2, #194	; 0xc2
 8000492:	32ff      	adds	r2, #255	; 0xff
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <MX_ADC_Init+0xf4>)
 8000498:	222c      	movs	r2, #44	; 0x2c
 800049a:	2100      	movs	r1, #0
 800049c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800049e:	4b23      	ldr	r3, [pc, #140]	; (800052c <MX_ADC_Init+0xf4>)
 80004a0:	2204      	movs	r2, #4
 80004a2:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <MX_ADC_Init+0xf4>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004aa:	4b20      	ldr	r3, [pc, #128]	; (800052c <MX_ADC_Init+0xf4>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <MX_ADC_Init+0xf4>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004b6:	4b1d      	ldr	r3, [pc, #116]	; (800052c <MX_ADC_Init+0xf4>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004bc:	4b1b      	ldr	r3, [pc, #108]	; (800052c <MX_ADC_Init+0xf4>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 fdbe 	bl	8001040 <HAL_ADC_Init>
 80004c4:	1e03      	subs	r3, r0, #0
 80004c6:	d001      	beq.n	80004cc <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80004c8:	f000 f9ee 	bl	80008a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004cc:	003b      	movs	r3, r7
 80004ce:	2201      	movs	r2, #1
 80004d0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80004d2:	003b      	movs	r3, r7
 80004d4:	2280      	movs	r2, #128	; 0x80
 80004d6:	0152      	lsls	r2, r2, #5
 80004d8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004da:	003a      	movs	r2, r7
 80004dc:	4b13      	ldr	r3, [pc, #76]	; (800052c <MX_ADC_Init+0xf4>)
 80004de:	0011      	movs	r1, r2
 80004e0:	0018      	movs	r0, r3
 80004e2:	f000 ff21 	bl	8001328 <HAL_ADC_ConfigChannel>
 80004e6:	1e03      	subs	r3, r0, #0
 80004e8:	d001      	beq.n	80004ee <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80004ea:	f000 f9dd 	bl	80008a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80004ee:	003b      	movs	r3, r7
 80004f0:	4a10      	ldr	r2, [pc, #64]	; (8000534 <MX_ADC_Init+0xfc>)
 80004f2:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004f4:	003a      	movs	r2, r7
 80004f6:	4b0d      	ldr	r3, [pc, #52]	; (800052c <MX_ADC_Init+0xf4>)
 80004f8:	0011      	movs	r1, r2
 80004fa:	0018      	movs	r0, r3
 80004fc:	f000 ff14 	bl	8001328 <HAL_ADC_ConfigChannel>
 8000500:	1e03      	subs	r3, r0, #0
 8000502:	d001      	beq.n	8000508 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000504:	f000 f9d0 	bl	80008a8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted. 
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000508:	003b      	movs	r3, r7
 800050a:	4a0b      	ldr	r2, [pc, #44]	; (8000538 <MX_ADC_Init+0x100>)
 800050c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800050e:	003a      	movs	r2, r7
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <MX_ADC_Init+0xf4>)
 8000512:	0011      	movs	r1, r2
 8000514:	0018      	movs	r0, r3
 8000516:	f000 ff07 	bl	8001328 <HAL_ADC_ConfigChannel>
 800051a:	1e03      	subs	r3, r0, #0
 800051c:	d001      	beq.n	8000522 <MX_ADC_Init+0xea>
  {
    Error_Handler();
 800051e:	f000 f9c3 	bl	80008a8 <Error_Handler>
  }

}
 8000522:	46c0      	nop			; (mov r8, r8)
 8000524:	46bd      	mov	sp, r7
 8000526:	b002      	add	sp, #8
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	20000020 	.word	0x20000020
 8000530:	40012400 	.word	0x40012400
 8000534:	04000002 	.word	0x04000002
 8000538:	08000004 	.word	0x08000004

0800053c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b088      	sub	sp, #32
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000544:	230c      	movs	r3, #12
 8000546:	18fb      	adds	r3, r7, r3
 8000548:	0018      	movs	r0, r3
 800054a:	2314      	movs	r3, #20
 800054c:	001a      	movs	r2, r3
 800054e:	2100      	movs	r1, #0
 8000550:	f003 fbee 	bl	8003d30 <memset>
  if(adcHandle->Instance==ADC1)
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a15      	ldr	r2, [pc, #84]	; (80005b0 <HAL_ADC_MspInit+0x74>)
 800055a:	4293      	cmp	r3, r2
 800055c:	d123      	bne.n	80005a6 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <HAL_ADC_MspInit+0x78>)
 8000560:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000562:	4b14      	ldr	r3, [pc, #80]	; (80005b4 <HAL_ADC_MspInit+0x78>)
 8000564:	2180      	movs	r1, #128	; 0x80
 8000566:	0089      	lsls	r1, r1, #2
 8000568:	430a      	orrs	r2, r1
 800056a:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <HAL_ADC_MspInit+0x78>)
 800056e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000570:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <HAL_ADC_MspInit+0x78>)
 8000572:	2101      	movs	r1, #1
 8000574:	430a      	orrs	r2, r1
 8000576:	62da      	str	r2, [r3, #44]	; 0x2c
 8000578:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <HAL_ADC_MspInit+0x78>)
 800057a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800057c:	2201      	movs	r2, #1
 800057e:	4013      	ands	r3, r2
 8000580:	60bb      	str	r3, [r7, #8]
 8000582:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration    
    PA0     ------> ADC_IN0
    PA1     ------> ADC_IN1
    PA2     ------> ADC_IN2 
    */
    GPIO_InitStruct.Pin = u_in_Pin|t_in_Pin|i_in_Pin;
 8000584:	210c      	movs	r1, #12
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2207      	movs	r2, #7
 800058a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2203      	movs	r2, #3
 8000590:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000598:	187a      	adds	r2, r7, r1
 800059a:	23a0      	movs	r3, #160	; 0xa0
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	0011      	movs	r1, r2
 80005a0:	0018      	movs	r0, r3
 80005a2:	f001 f887 	bl	80016b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b008      	add	sp, #32
 80005ac:	bd80      	pop	{r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40012400 	.word	0x40012400
 80005b4:	40021000 	.word	0x40021000

080005b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005b8:	b590      	push	{r4, r7, lr}
 80005ba:	b089      	sub	sp, #36	; 0x24
 80005bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005be:	240c      	movs	r4, #12
 80005c0:	193b      	adds	r3, r7, r4
 80005c2:	0018      	movs	r0, r3
 80005c4:	2314      	movs	r3, #20
 80005c6:	001a      	movs	r2, r3
 80005c8:	2100      	movs	r1, #0
 80005ca:	f003 fbb1 	bl	8003d30 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	4b27      	ldr	r3, [pc, #156]	; (800066c <MX_GPIO_Init+0xb4>)
 80005d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005d2:	4b26      	ldr	r3, [pc, #152]	; (800066c <MX_GPIO_Init+0xb4>)
 80005d4:	2101      	movs	r1, #1
 80005d6:	430a      	orrs	r2, r1
 80005d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80005da:	4b24      	ldr	r3, [pc, #144]	; (800066c <MX_GPIO_Init+0xb4>)
 80005dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005de:	2201      	movs	r2, #1
 80005e0:	4013      	ands	r3, r2
 80005e2:	60bb      	str	r3, [r7, #8]
 80005e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e6:	4b21      	ldr	r3, [pc, #132]	; (800066c <MX_GPIO_Init+0xb4>)
 80005e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <MX_GPIO_Init+0xb4>)
 80005ec:	2102      	movs	r1, #2
 80005ee:	430a      	orrs	r2, r1
 80005f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80005f2:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_GPIO_Init+0xb4>)
 80005f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f6:	2202      	movs	r2, #2
 80005f8:	4013      	ands	r3, r2
 80005fa:	607b      	str	r3, [r7, #4]
 80005fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, aux_out_Pin|heater_out_Pin|usec_gen_out_Pin|pos_pack_gen_out_Pin 
 80005fe:	491c      	ldr	r1, [pc, #112]	; (8000670 <MX_GPIO_Init+0xb8>)
 8000600:	23a0      	movs	r3, #160	; 0xa0
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2200      	movs	r2, #0
 8000606:	0018      	movs	r0, r3
 8000608:	f001 f9ca 	bl	80019a0 <HAL_GPIO_WritePin>
                          |neg_pack_gen_out_Pin|f3_out_Pin|sound_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, addr0_out_Pin|addr1_out_Pin|addr2_out_Pin|spi2_clock_out_Pin 
 800060c:	4919      	ldr	r1, [pc, #100]	; (8000674 <MX_GPIO_Init+0xbc>)
 800060e:	4b1a      	ldr	r3, [pc, #104]	; (8000678 <MX_GPIO_Init+0xc0>)
 8000610:	2200      	movs	r2, #0
 8000612:	0018      	movs	r0, r3
 8000614:	f001 f9c4 	bl	80019a0 <HAL_GPIO_WritePin>
                          |addr3_out_Pin|led_out_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin 
                           PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = aux_out_Pin|heater_out_Pin|usec_gen_out_Pin|pos_pack_gen_out_Pin 
 8000618:	193b      	adds	r3, r7, r4
 800061a:	4a15      	ldr	r2, [pc, #84]	; (8000670 <MX_GPIO_Init+0xb8>)
 800061c:	601a      	str	r2, [r3, #0]
                          |neg_pack_gen_out_Pin|f3_out_Pin|sound_out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2201      	movs	r2, #1
 8000622:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	193b      	adds	r3, r7, r4
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	193b      	adds	r3, r7, r4
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000630:	193a      	adds	r2, r7, r4
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	0011      	movs	r1, r2
 8000638:	0018      	movs	r0, r3
 800063a:	f001 f83b 	bl	80016b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin 
                           PBPin PBPin */
  GPIO_InitStruct.Pin = addr0_out_Pin|addr1_out_Pin|addr2_out_Pin|spi2_clock_out_Pin 
 800063e:	0021      	movs	r1, r4
 8000640:	187b      	adds	r3, r7, r1
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <MX_GPIO_Init+0xbc>)
 8000644:	601a      	str	r2, [r3, #0]
                          |addr3_out_Pin|led_out_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000646:	187b      	adds	r3, r7, r1
 8000648:	2201      	movs	r2, #1
 800064a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	187b      	adds	r3, r7, r1
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000652:	187b      	adds	r3, r7, r1
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000658:	187b      	adds	r3, r7, r1
 800065a:	4a07      	ldr	r2, [pc, #28]	; (8000678 <MX_GPIO_Init+0xc0>)
 800065c:	0019      	movs	r1, r3
 800065e:	0010      	movs	r0, r2
 8000660:	f001 f828 	bl	80016b4 <HAL_GPIO_Init>

}
 8000664:	46c0      	nop			; (mov r8, r8)
 8000666:	46bd      	mov	sp, r7
 8000668:	b009      	add	sp, #36	; 0x24
 800066a:	bd90      	pop	{r4, r7, pc}
 800066c:	40021000 	.word	0x40021000
 8000670:	00001f18 	.word	0x00001f18
 8000674:	0000201f 	.word	0x0000201f
 8000678:	50000400 	.word	0x50000400

0800067c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000680:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000682:	4a1d      	ldr	r2, [pc, #116]	; (80006f8 <MX_I2C1_Init+0x7c>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 8000686:	4b1b      	ldr	r3, [pc, #108]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000688:	22e1      	movs	r2, #225	; 0xe1
 800068a:	00d2      	lsls	r2, r2, #3
 800068c:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000696:	2201      	movs	r2, #1
 8000698:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_I2C1_Init+0x78>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_I2C1_Init+0x78>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_I2C1_Init+0x78>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_I2C1_Init+0x78>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b10      	ldr	r3, [pc, #64]	; (80006f4 <MX_I2C1_Init+0x78>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_I2C1_Init+0x78>)
 80006ba:	0018      	movs	r0, r3
 80006bc:	f001 f98e 	bl	80019dc <HAL_I2C_Init>
 80006c0:	1e03      	subs	r3, r0, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f8f0 	bl	80008a8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c8:	4b0a      	ldr	r3, [pc, #40]	; (80006f4 <MX_I2C1_Init+0x78>)
 80006ca:	2100      	movs	r1, #0
 80006cc:	0018      	movs	r0, r3
 80006ce:	f001 fa1b 	bl	8001b08 <HAL_I2CEx_ConfigAnalogFilter>
 80006d2:	1e03      	subs	r3, r0, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006d6:	f000 f8e7 	bl	80008a8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006da:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_I2C1_Init+0x78>)
 80006dc:	2100      	movs	r1, #0
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 fa5e 	bl	8001ba0 <HAL_I2CEx_ConfigDigitalFilter>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 f8de 	bl	80008a8 <Error_Handler>
  }

}
 80006ec:	46c0      	nop			; (mov r8, r8)
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	46c0      	nop			; (mov r8, r8)
 80006f4:	2000007c 	.word	0x2000007c
 80006f8:	40005400 	.word	0x40005400

080006fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000704:	230c      	movs	r3, #12
 8000706:	18fb      	adds	r3, r7, r3
 8000708:	0018      	movs	r0, r3
 800070a:	2314      	movs	r3, #20
 800070c:	001a      	movs	r2, r3
 800070e:	2100      	movs	r1, #0
 8000710:	f003 fb0e 	bl	8003d30 <memset>
  if(i2cHandle->Instance==I2C1)
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a18      	ldr	r2, [pc, #96]	; (800077c <HAL_I2C_MspInit+0x80>)
 800071a:	4293      	cmp	r3, r2
 800071c:	d129      	bne.n	8000772 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <HAL_I2C_MspInit+0x84>)
 8000720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_I2C_MspInit+0x84>)
 8000724:	2102      	movs	r1, #2
 8000726:	430a      	orrs	r2, r1
 8000728:	62da      	str	r2, [r3, #44]	; 0x2c
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_I2C_MspInit+0x84>)
 800072c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800072e:	2202      	movs	r2, #2
 8000730:	4013      	ands	r3, r2
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000736:	210c      	movs	r1, #12
 8000738:	187b      	adds	r3, r7, r1
 800073a:	22c0      	movs	r2, #192	; 0xc0
 800073c:	0092      	lsls	r2, r2, #2
 800073e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2212      	movs	r2, #18
 8000744:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2201      	movs	r2, #1
 800074a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2203      	movs	r2, #3
 8000750:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000752:	187b      	adds	r3, r7, r1
 8000754:	2204      	movs	r2, #4
 8000756:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000758:	187b      	adds	r3, r7, r1
 800075a:	4a0a      	ldr	r2, [pc, #40]	; (8000784 <HAL_I2C_MspInit+0x88>)
 800075c:	0019      	movs	r1, r3
 800075e:	0010      	movs	r0, r2
 8000760:	f000 ffa8 	bl	80016b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000764:	4b06      	ldr	r3, [pc, #24]	; (8000780 <HAL_I2C_MspInit+0x84>)
 8000766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000768:	4b05      	ldr	r3, [pc, #20]	; (8000780 <HAL_I2C_MspInit+0x84>)
 800076a:	2180      	movs	r1, #128	; 0x80
 800076c:	0389      	lsls	r1, r1, #14
 800076e:	430a      	orrs	r2, r1
 8000770:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	46bd      	mov	sp, r7
 8000776:	b008      	add	sp, #32
 8000778:	bd80      	pop	{r7, pc}
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	40005400 	.word	0x40005400
 8000780:	40021000 	.word	0x40021000
 8000784:	50000400 	.word	0x50000400

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f000 fbf8 	bl	8000f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f814 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f7ff ff10 	bl	80005b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000798:	f000 f9be 	bl	8000b18 <MX_TIM2_Init>
  MX_TIM6_Init();
 800079c:	f000 fa0e 	bl	8000bbc <MX_TIM6_Init>
  MX_TIM21_Init();
 80007a0:	f000 fa46 	bl	8000c30 <MX_TIM21_Init>
  MX_TIM22_Init();
 80007a4:	f000 fa9a 	bl	8000cdc <MX_TIM22_Init>
  MX_SPI2_Init();
 80007a8:	f000 f884 	bl	80008b4 <MX_SPI2_Init>
  MX_USART1_UART_Init();
 80007ac:	f000 fb42 	bl	8000e34 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80007b0:	f7ff ff64 	bl	800067c <MX_I2C1_Init>
  MX_ADC_Init();
 80007b4:	f7ff fe40 	bl	8000438 <MX_ADC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <main+0x30>
	...

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b09b      	sub	sp, #108	; 0x6c
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	2434      	movs	r4, #52	; 0x34
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	0018      	movs	r0, r3
 80007c8:	2334      	movs	r3, #52	; 0x34
 80007ca:	001a      	movs	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	f003 faaf 	bl	8003d30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	2320      	movs	r3, #32
 80007d4:	18fb      	adds	r3, r7, r3
 80007d6:	0018      	movs	r0, r3
 80007d8:	2314      	movs	r3, #20
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f003 faa7 	bl	8003d30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	0018      	movs	r0, r3
 80007e6:	231c      	movs	r3, #28
 80007e8:	001a      	movs	r2, r3
 80007ea:	2100      	movs	r1, #0
 80007ec:	f003 faa0 	bl	8003d30 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f0:	4b2b      	ldr	r3, [pc, #172]	; (80008a0 <SystemClock_Config+0xe4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a2b      	ldr	r2, [pc, #172]	; (80008a4 <SystemClock_Config+0xe8>)
 80007f6:	401a      	ands	r2, r3
 80007f8:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <SystemClock_Config+0xe4>)
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	0109      	lsls	r1, r1, #4
 80007fe:	430a      	orrs	r2, r1
 8000800:	601a      	str	r2, [r3, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000802:	0021      	movs	r1, r4
 8000804:	187b      	adds	r3, r7, r1
 8000806:	2202      	movs	r2, #2
 8000808:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080a:	187b      	adds	r3, r7, r1
 800080c:	2201      	movs	r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2210      	movs	r2, #16
 8000814:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2202      	movs	r2, #2
 800081a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2200      	movs	r2, #0
 8000820:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	02d2      	lsls	r2, r2, #11
 8000828:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	03d2      	lsls	r2, r2, #15
 8000830:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	187b      	adds	r3, r7, r1
 8000834:	0018      	movs	r0, r3
 8000836:	f001 f9ff 	bl	8001c38 <HAL_RCC_OscConfig>
 800083a:	1e03      	subs	r3, r0, #0
 800083c:	d001      	beq.n	8000842 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800083e:	f000 f833 	bl	80008a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000842:	2120      	movs	r1, #32
 8000844:	187b      	adds	r3, r7, r1
 8000846:	220f      	movs	r2, #15
 8000848:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2203      	movs	r2, #3
 800084e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2101      	movs	r1, #1
 8000866:	0018      	movs	r0, r3
 8000868:	f001 fd4e 	bl	8002308 <HAL_RCC_ClockConfig>
 800086c:	1e03      	subs	r3, r0, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000870:	f000 f81a 	bl	80008a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1;
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	2209      	movs	r2, #9
 8000878:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000880:	1d3b      	adds	r3, r7, #4
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000886:	1d3b      	adds	r3, r7, #4
 8000888:	0018      	movs	r0, r3
 800088a:	f001 ff21 	bl	80026d0 <HAL_RCCEx_PeriphCLKConfig>
 800088e:	1e03      	subs	r3, r0, #0
 8000890:	d001      	beq.n	8000896 <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000892:	f000 f809 	bl	80008a8 <Error_Handler>
  }
}
 8000896:	46c0      	nop			; (mov r8, r8)
 8000898:	46bd      	mov	sp, r7
 800089a:	b01b      	add	sp, #108	; 0x6c
 800089c:	bd90      	pop	{r4, r7, pc}
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	40007000 	.word	0x40007000
 80008a4:	ffffe7ff 	.word	0xffffe7ff

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80008ac:	46c0      	nop			; (mov r8, r8)
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
	...

080008b4 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0

  hspi2.Instance = SPI2;
 80008b8:	4b18      	ldr	r3, [pc, #96]	; (800091c <MX_SPI2_Init+0x68>)
 80008ba:	4a19      	ldr	r2, [pc, #100]	; (8000920 <MX_SPI2_Init+0x6c>)
 80008bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80008be:	4b17      	ldr	r3, [pc, #92]	; (800091c <MX_SPI2_Init+0x68>)
 80008c0:	2282      	movs	r2, #130	; 0x82
 80008c2:	0052      	lsls	r2, r2, #1
 80008c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_SPI2_Init+0x68>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_SPI2_Init+0x68>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008d2:	4b12      	ldr	r3, [pc, #72]	; (800091c <MX_SPI2_Init+0x68>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_SPI2_Init+0x68>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80008de:	4b0f      	ldr	r3, [pc, #60]	; (800091c <MX_SPI2_Init+0x68>)
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	0092      	lsls	r2, r2, #2
 80008e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80008e6:	4b0d      	ldr	r3, [pc, #52]	; (800091c <MX_SPI2_Init+0x68>)
 80008e8:	2218      	movs	r2, #24
 80008ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <MX_SPI2_Init+0x68>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80008f2:	4b0a      	ldr	r3, [pc, #40]	; (800091c <MX_SPI2_Init+0x68>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <MX_SPI2_Init+0x68>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80008fe:	4b07      	ldr	r3, [pc, #28]	; (800091c <MX_SPI2_Init+0x68>)
 8000900:	2207      	movs	r2, #7
 8000902:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000904:	4b05      	ldr	r3, [pc, #20]	; (800091c <MX_SPI2_Init+0x68>)
 8000906:	0018      	movs	r0, r3
 8000908:	f002 f818 	bl	800293c <HAL_SPI_Init>
 800090c:	1e03      	subs	r3, r0, #0
 800090e:	d001      	beq.n	8000914 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000910:	f7ff ffca 	bl	80008a8 <Error_Handler>
  }

}
 8000914:	46c0      	nop			; (mov r8, r8)
 8000916:	46bd      	mov	sp, r7
 8000918:	bd80      	pop	{r7, pc}
 800091a:	46c0      	nop			; (mov r8, r8)
 800091c:	200000c8 	.word	0x200000c8
 8000920:	40003800 	.word	0x40003800

08000924 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b089      	sub	sp, #36	; 0x24
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092c:	230c      	movs	r3, #12
 800092e:	18fb      	adds	r3, r7, r3
 8000930:	0018      	movs	r0, r3
 8000932:	2314      	movs	r3, #20
 8000934:	001a      	movs	r2, r3
 8000936:	2100      	movs	r1, #0
 8000938:	f003 f9fa 	bl	8003d30 <memset>
  if(spiHandle->Instance==SPI2)
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a24      	ldr	r2, [pc, #144]	; (80009d4 <HAL_SPI_MspInit+0xb0>)
 8000942:	4293      	cmp	r3, r2
 8000944:	d141      	bne.n	80009ca <HAL_SPI_MspInit+0xa6>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000946:	4b24      	ldr	r3, [pc, #144]	; (80009d8 <HAL_SPI_MspInit+0xb4>)
 8000948:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800094a:	4b23      	ldr	r3, [pc, #140]	; (80009d8 <HAL_SPI_MspInit+0xb4>)
 800094c:	2180      	movs	r1, #128	; 0x80
 800094e:	01c9      	lsls	r1, r1, #7
 8000950:	430a      	orrs	r2, r1
 8000952:	639a      	str	r2, [r3, #56]	; 0x38
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000954:	4b20      	ldr	r3, [pc, #128]	; (80009d8 <HAL_SPI_MspInit+0xb4>)
 8000956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000958:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <HAL_SPI_MspInit+0xb4>)
 800095a:	2102      	movs	r1, #2
 800095c:	430a      	orrs	r2, r1
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <HAL_SPI_MspInit+0xb4>)
 8000962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000964:	2202      	movs	r2, #2
 8000966:	4013      	ands	r3, r2
 8000968:	60bb      	str	r3, [r7, #8]
 800096a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800096c:	210c      	movs	r1, #12
 800096e:	187b      	adds	r3, r7, r1
 8000970:	2280      	movs	r2, #128	; 0x80
 8000972:	00d2      	lsls	r2, r2, #3
 8000974:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2202      	movs	r2, #2
 800097a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2203      	movs	r2, #3
 8000986:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2205      	movs	r2, #5
 800098c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800098e:	000c      	movs	r4, r1
 8000990:	187b      	adds	r3, r7, r1
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 8000994:	0019      	movs	r1, r3
 8000996:	0010      	movs	r0, r2
 8000998:	f000 fe8c 	bl	80016b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800099c:	0021      	movs	r1, r4
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	22c0      	movs	r2, #192	; 0xc0
 80009a2:	0212      	lsls	r2, r2, #8
 80009a4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	187b      	adds	r3, r7, r1
 80009a8:	2202      	movs	r2, #2
 80009aa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	187b      	adds	r3, r7, r1
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b2:	187b      	adds	r3, r7, r1
 80009b4:	2203      	movs	r2, #3
 80009b6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80009b8:	187b      	adds	r3, r7, r1
 80009ba:	2200      	movs	r2, #0
 80009bc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009be:	187b      	adds	r3, r7, r1
 80009c0:	4a06      	ldr	r2, [pc, #24]	; (80009dc <HAL_SPI_MspInit+0xb8>)
 80009c2:	0019      	movs	r1, r3
 80009c4:	0010      	movs	r0, r2
 80009c6:	f000 fe75 	bl	80016b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	46bd      	mov	sp, r7
 80009ce:	b009      	add	sp, #36	; 0x24
 80009d0:	bd90      	pop	{r4, r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	40003800 	.word	0x40003800
 80009d8:	40021000 	.word	0x40021000
 80009dc:	50000400 	.word	0x50000400

080009e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <HAL_MspInit+0x24>)
 80009e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009e8:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <HAL_MspInit+0x24>)
 80009ea:	2101      	movs	r1, #1
 80009ec:	430a      	orrs	r2, r1
 80009ee:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_MspInit+0x24>)
 80009f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <HAL_MspInit+0x24>)
 80009f6:	2180      	movs	r1, #128	; 0x80
 80009f8:	0549      	lsls	r1, r1, #21
 80009fa:	430a      	orrs	r2, r1
 80009fc:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40021000 	.word	0x40021000

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a0c:	46c0      	nop			; (mov r8, r8)
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a12:	b580      	push	{r7, lr}
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a16:	e7fe      	b.n	8000a16 <HardFault_Handler+0x4>

08000a18 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a1c:	46c0      	nop			; (mov r8, r8)
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a26:	46c0      	nop			; (mov r8, r8)
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}

08000a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a30:	f000 faf0 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a34:	46c0      	nop			; (mov r8, r8)
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
	...

08000a3c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000a40:	4b03      	ldr	r3, [pc, #12]	; (8000a50 <TIM2_IRQHandler+0x14>)
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 f810 	bl	8002a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	20000198 	.word	0x20000198

08000a54 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a58:	4b03      	ldr	r3, [pc, #12]	; (8000a68 <TIM6_IRQHandler+0x14>)
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 f804 	bl	8002a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a60:	46c0      	nop			; (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	46c0      	nop			; (mov r8, r8)
 8000a68:	2000015c 	.word	0x2000015c

08000a6c <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000a70:	4b03      	ldr	r3, [pc, #12]	; (8000a80 <TIM21_IRQHandler+0x14>)
 8000a72:	0018      	movs	r0, r3
 8000a74:	f001 fff8 	bl	8002a68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 8000a78:	46c0      	nop			; (mov r8, r8)
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	46c0      	nop			; (mov r8, r8)
 8000a80:	200001d4 	.word	0x200001d4

08000a84 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <USART1_IRQHandler+0x14>)
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f002 fb40 	bl	8003110 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a90:	46c0      	nop			; (mov r8, r8)
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	46c0      	nop			; (mov r8, r8)
 8000a98:	20000210 	.word	0x20000210

08000a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <SystemInit+0x64>)
 8000aa2:	681a      	ldr	r2, [r3, #0]
 8000aa4:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <SystemInit+0x64>)
 8000aa6:	2180      	movs	r1, #128	; 0x80
 8000aa8:	0049      	lsls	r1, r1, #1
 8000aaa:	430a      	orrs	r2, r1
 8000aac:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 8000aae:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <SystemInit+0x64>)
 8000ab0:	68da      	ldr	r2, [r3, #12]
 8000ab2:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <SystemInit+0x64>)
 8000ab4:	4913      	ldr	r1, [pc, #76]	; (8000b04 <SystemInit+0x68>)
 8000ab6:	400a      	ands	r2, r1
 8000ab8:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8000aba:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <SystemInit+0x64>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <SystemInit+0x64>)
 8000ac0:	4911      	ldr	r1, [pc, #68]	; (8000b08 <SystemInit+0x6c>)
 8000ac2:	400a      	ands	r2, r1
 8000ac4:	601a      	str	r2, [r3, #0]

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <SystemInit+0x64>)
 8000ac8:	689a      	ldr	r2, [r3, #8]
 8000aca:	4b0d      	ldr	r3, [pc, #52]	; (8000b00 <SystemInit+0x64>)
 8000acc:	2101      	movs	r1, #1
 8000ace:	438a      	bics	r2, r1
 8000ad0:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8000ad2:	4b0b      	ldr	r3, [pc, #44]	; (8000b00 <SystemInit+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	4b0a      	ldr	r3, [pc, #40]	; (8000b00 <SystemInit+0x64>)
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <SystemInit+0x70>)
 8000ada:	400a      	ands	r2, r1
 8000adc:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <SystemInit+0x64>)
 8000ae0:	68da      	ldr	r2, [r3, #12]
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <SystemInit+0x64>)
 8000ae4:	490a      	ldr	r1, [pc, #40]	; (8000b10 <SystemInit+0x74>)
 8000ae6:	400a      	ands	r2, r1
 8000ae8:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <SystemInit+0x64>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <SystemInit+0x78>)
 8000af2:	2280      	movs	r2, #128	; 0x80
 8000af4:	0512      	lsls	r2, r2, #20
 8000af6:	609a      	str	r2, [r3, #8]
#endif
}
 8000af8:	46c0      	nop			; (mov r8, r8)
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40021000 	.word	0x40021000
 8000b04:	88ff400c 	.word	0x88ff400c
 8000b08:	fef6fff6 	.word	0xfef6fff6
 8000b0c:	fffbffff 	.word	0xfffbffff
 8000b10:	ff02ffff 	.word	0xff02ffff
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b1e:	2308      	movs	r3, #8
 8000b20:	18fb      	adds	r3, r7, r3
 8000b22:	0018      	movs	r0, r3
 8000b24:	2310      	movs	r3, #16
 8000b26:	001a      	movs	r2, r3
 8000b28:	2100      	movs	r1, #0
 8000b2a:	f003 f901 	bl	8003d30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2e:	003b      	movs	r3, r7
 8000b30:	0018      	movs	r0, r3
 8000b32:	2308      	movs	r3, #8
 8000b34:	001a      	movs	r2, r3
 8000b36:	2100      	movs	r1, #0
 8000b38:	f003 f8fa 	bl	8003d30 <memset>

  htim2.Instance = TIM2;
 8000b3c:	4b1e      	ldr	r3, [pc, #120]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000b3e:	2280      	movs	r2, #128	; 0x80
 8000b40:	05d2      	lsls	r2, r2, #23
 8000b42:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b44:	4b1c      	ldr	r3, [pc, #112]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b4a:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 32;
 8000b50:	4b19      	ldr	r3, [pc, #100]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000b52:	2220      	movs	r2, #32
 8000b54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b5c:	4b16      	ldr	r3, [pc, #88]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000b64:	0018      	movs	r0, r3
 8000b66:	f001 ff53 	bl	8002a10 <HAL_TIM_Base_Init>
 8000b6a:	1e03      	subs	r3, r0, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8000b6e:	f7ff fe9b 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b72:	2108      	movs	r1, #8
 8000b74:	187b      	adds	r3, r7, r1
 8000b76:	2280      	movs	r2, #128	; 0x80
 8000b78:	0152      	lsls	r2, r2, #5
 8000b7a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b7c:	187a      	adds	r2, r7, r1
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000b80:	0011      	movs	r1, r2
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 f858 	bl	8002c38 <HAL_TIM_ConfigClockSource>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d001      	beq.n	8000b90 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8000b8c:	f7ff fe8c 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b90:	003b      	movs	r3, r7
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2200      	movs	r2, #0
 8000b9a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b9c:	003a      	movs	r2, r7
 8000b9e:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <MX_TIM2_Init+0xa0>)
 8000ba0:	0011      	movs	r1, r2
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 fa1c 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	1e03      	subs	r3, r0, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8000bac:	f7ff fe7c 	bl	80008a8 <Error_Handler>
  }

}
 8000bb0:	46c0      	nop			; (mov r8, r8)
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	b006      	add	sp, #24
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000198 	.word	0x20000198

08000bbc <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bc2:	003b      	movs	r3, r7
 8000bc4:	0018      	movs	r0, r3
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	001a      	movs	r2, r3
 8000bca:	2100      	movs	r1, #0
 8000bcc:	f003 f8b0 	bl	8003d30 <memset>

  htim6.Instance = TIM6;
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bd2:	4a16      	ldr	r2, [pc, #88]	; (8000c2c <MX_TIM6_Init+0x70>)
 8000bd4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b12      	ldr	r3, [pc, #72]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 32000;
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000be4:	22fa      	movs	r2, #250	; 0xfa
 8000be6:	01d2      	lsls	r2, r2, #7
 8000be8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bea:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f001 ff0c 	bl	8002a10 <HAL_TIM_Base_Init>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM6_Init+0x44>
  {
    Error_Handler();
 8000bfc:	f7ff fe54 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c00:	003b      	movs	r3, r7
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c06:	003b      	movs	r3, r7
 8000c08:	2200      	movs	r2, #0
 8000c0a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000c0c:	003a      	movs	r2, r7
 8000c0e:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_TIM6_Init+0x6c>)
 8000c10:	0011      	movs	r1, r2
 8000c12:	0018      	movs	r0, r3
 8000c14:	f002 f9e4 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8000c18:	1e03      	subs	r3, r0, #0
 8000c1a:	d001      	beq.n	8000c20 <MX_TIM6_Init+0x64>
  {
    Error_Handler();
 8000c1c:	f7ff fe44 	bl	80008a8 <Error_Handler>
  }

}
 8000c20:	46c0      	nop			; (mov r8, r8)
 8000c22:	46bd      	mov	sp, r7
 8000c24:	b002      	add	sp, #8
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	2000015c 	.word	0x2000015c
 8000c2c:	40001000 	.word	0x40001000

08000c30 <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b086      	sub	sp, #24
 8000c34:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c36:	2308      	movs	r3, #8
 8000c38:	18fb      	adds	r3, r7, r3
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	2310      	movs	r3, #16
 8000c3e:	001a      	movs	r2, r3
 8000c40:	2100      	movs	r1, #0
 8000c42:	f003 f875 	bl	8003d30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c46:	003b      	movs	r3, r7
 8000c48:	0018      	movs	r0, r3
 8000c4a:	2308      	movs	r3, #8
 8000c4c:	001a      	movs	r2, r3
 8000c4e:	2100      	movs	r1, #0
 8000c50:	f003 f86e 	bl	8003d30 <memset>

  htim21.Instance = TIM21;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c56:	4a20      	ldr	r2, [pc, #128]	; (8000cd8 <MX_TIM21_Init+0xa8>)
 8000c58:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 1000;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c5c:	22fa      	movs	r2, #250	; 0xfa
 8000c5e:	0092      	lsls	r2, r2, #2
 8000c60:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 32000;
 8000c68:	4b1a      	ldr	r3, [pc, #104]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c6a:	22fa      	movs	r2, #250	; 0xfa
 8000c6c:	01d2      	lsls	r2, r2, #7
 8000c6e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c70:	4b18      	ldr	r3, [pc, #96]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c76:	4b17      	ldr	r3, [pc, #92]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000c7c:	4b15      	ldr	r3, [pc, #84]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f001 fec6 	bl	8002a10 <HAL_TIM_Base_Init>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_TIM21_Init+0x5c>
  {
    Error_Handler();
 8000c88:	f7ff fe0e 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c8c:	2108      	movs	r1, #8
 8000c8e:	187b      	adds	r3, r7, r1
 8000c90:	2280      	movs	r2, #128	; 0x80
 8000c92:	0152      	lsls	r2, r2, #5
 8000c94:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000c96:	187a      	adds	r2, r7, r1
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000c9a:	0011      	movs	r1, r2
 8000c9c:	0018      	movs	r0, r3
 8000c9e:	f001 ffcb 	bl	8002c38 <HAL_TIM_ConfigClockSource>
 8000ca2:	1e03      	subs	r3, r0, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
 8000ca6:	f7ff fdff 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000caa:	003b      	movs	r3, r7
 8000cac:	2200      	movs	r2, #0
 8000cae:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	003b      	movs	r3, r7
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000cb6:	003a      	movs	r2, r7
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <MX_TIM21_Init+0xa4>)
 8000cba:	0011      	movs	r1, r2
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 f98f 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d001      	beq.n	8000cca <MX_TIM21_Init+0x9a>
  {
    Error_Handler();
 8000cc6:	f7ff fdef 	bl	80008a8 <Error_Handler>
  }

}
 8000cca:	46c0      	nop			; (mov r8, r8)
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	b006      	add	sp, #24
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	200001d4 	.word	0x200001d4
 8000cd8:	40010800 	.word	0x40010800

08000cdc <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ce2:	2308      	movs	r3, #8
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	2310      	movs	r3, #16
 8000cea:	001a      	movs	r2, r3
 8000cec:	2100      	movs	r1, #0
 8000cee:	f003 f81f 	bl	8003d30 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf2:	003b      	movs	r3, r7
 8000cf4:	0018      	movs	r0, r3
 8000cf6:	2308      	movs	r3, #8
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	f003 f818 	bl	8003d30 <memset>

  htim22.Instance = TIM22;
 8000d00:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d02:	4a1f      	ldr	r2, [pc, #124]	; (8000d80 <MX_TIM22_Init+0xa4>)
 8000d04:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 0;
 8000d06:	4b1d      	ldr	r3, [pc, #116]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0c:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 0;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d1e:	4b17      	ldr	r3, [pc, #92]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000d24:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d26:	0018      	movs	r0, r3
 8000d28:	f001 fe72 	bl	8002a10 <HAL_TIM_Base_Init>
 8000d2c:	1e03      	subs	r3, r0, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8000d30:	f7ff fdba 	bl	80008a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d34:	2108      	movs	r1, #8
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2280      	movs	r2, #128	; 0x80
 8000d3a:	0152      	lsls	r2, r2, #5
 8000d3c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000d3e:	187a      	adds	r2, r7, r1
 8000d40:	4b0e      	ldr	r3, [pc, #56]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d42:	0011      	movs	r1, r2
 8000d44:	0018      	movs	r0, r3
 8000d46:	f001 ff77 	bl	8002c38 <HAL_TIM_ConfigClockSource>
 8000d4a:	1e03      	subs	r3, r0, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 8000d4e:	f7ff fdab 	bl	80008a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d52:	003b      	movs	r3, r7
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d58:	003b      	movs	r3, r7
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000d5e:	003a      	movs	r2, r7
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <MX_TIM22_Init+0xa0>)
 8000d62:	0011      	movs	r1, r2
 8000d64:	0018      	movs	r0, r3
 8000d66:	f002 f93b 	bl	8002fe0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	1e03      	subs	r3, r0, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8000d6e:	f7ff fd9b 	bl	80008a8 <Error_Handler>
  }

}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	46bd      	mov	sp, r7
 8000d76:	b006      	add	sp, #24
 8000d78:	bd80      	pop	{r7, pc}
 8000d7a:	46c0      	nop			; (mov r8, r8)
 8000d7c:	20000120 	.word	0x20000120
 8000d80:	40011400 	.word	0x40011400

08000d84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	2380      	movs	r3, #128	; 0x80
 8000d92:	05db      	lsls	r3, r3, #23
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d10e      	bne.n	8000db6 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d98:	4b22      	ldr	r3, [pc, #136]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000d9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d9c:	4b21      	ldr	r3, [pc, #132]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000d9e:	2101      	movs	r1, #1
 8000da0:	430a      	orrs	r2, r1
 8000da2:	639a      	str	r2, [r3, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000da4:	2200      	movs	r2, #0
 8000da6:	2100      	movs	r1, #0
 8000da8:	200f      	movs	r0, #15
 8000daa:	f000 fc09 	bl	80015c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 fc1b 	bl	80015ea <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 8000db4:	e032      	b.n	8000e1c <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM6)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a1b      	ldr	r2, [pc, #108]	; (8000e28 <HAL_TIM_Base_MspInit+0xa4>)
 8000dbc:	4293      	cmp	r3, r2
 8000dbe:	d10e      	bne.n	8000dde <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dc0:	4b18      	ldr	r3, [pc, #96]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000dc4:	4b17      	ldr	r3, [pc, #92]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000dc6:	2110      	movs	r1, #16
 8000dc8:	430a      	orrs	r2, r1
 8000dca:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	2011      	movs	r0, #17
 8000dd2:	f000 fbf5 	bl	80015c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000dd6:	2011      	movs	r0, #17
 8000dd8:	f000 fc07 	bl	80015ea <HAL_NVIC_EnableIRQ>
}
 8000ddc:	e01e      	b.n	8000e1c <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM21)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <HAL_TIM_Base_MspInit+0xa8>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	d10e      	bne.n	8000e06 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000de8:	4b0e      	ldr	r3, [pc, #56]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dec:	4b0d      	ldr	r3, [pc, #52]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000dee:	2104      	movs	r1, #4
 8000df0:	430a      	orrs	r2, r1
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2014      	movs	r0, #20
 8000dfa:	f000 fbe1 	bl	80015c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000dfe:	2014      	movs	r0, #20
 8000e00:	f000 fbf3 	bl	80015ea <HAL_NVIC_EnableIRQ>
}
 8000e04:	e00a      	b.n	8000e1c <HAL_TIM_Base_MspInit+0x98>
  else if(tim_baseHandle->Instance==TIM22)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a09      	ldr	r2, [pc, #36]	; (8000e30 <HAL_TIM_Base_MspInit+0xac>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d105      	bne.n	8000e1c <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000e10:	4b04      	ldr	r3, [pc, #16]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000e12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_TIM_Base_MspInit+0xa0>)
 8000e16:	2120      	movs	r1, #32
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e1c:	46c0      	nop			; (mov r8, r8)
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	b002      	add	sp, #8
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40001000 	.word	0x40001000
 8000e2c:	40010800 	.word	0x40010800
 8000e30:	40011400 	.word	0x40011400

08000e34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e3a:	4a15      	ldr	r2, [pc, #84]	; (8000e90 <MX_USART1_UART_Init+0x5c>)
 8000e3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e3e:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e40:	22e1      	movs	r2, #225	; 0xe1
 8000e42:	0252      	lsls	r2, r2, #9
 8000e44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e5e:	4b0b      	ldr	r3, [pc, #44]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e64:	4b09      	ldr	r3, [pc, #36]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e6a:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e70:	4b06      	ldr	r3, [pc, #24]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <MX_USART1_UART_Init+0x58>)
 8000e78:	0018      	movs	r0, r3
 8000e7a:	f002 f8f5 	bl	8003068 <HAL_UART_Init>
 8000e7e:	1e03      	subs	r3, r0, #0
 8000e80:	d001      	beq.n	8000e86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000e82:	f7ff fd11 	bl	80008a8 <Error_Handler>
  }

}
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	20000210 	.word	0x20000210
 8000e90:	40013800 	.word	0x40013800

08000e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b088      	sub	sp, #32
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e9c:	230c      	movs	r3, #12
 8000e9e:	18fb      	adds	r3, r7, r3
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	2314      	movs	r3, #20
 8000ea4:	001a      	movs	r2, r3
 8000ea6:	2100      	movs	r1, #0
 8000ea8:	f002 ff42 	bl	8003d30 <memset>
  if(uartHandle->Instance==USART1)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a1b      	ldr	r2, [pc, #108]	; (8000f20 <HAL_UART_MspInit+0x8c>)
 8000eb2:	4293      	cmp	r3, r2
 8000eb4:	d130      	bne.n	8000f18 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000eb8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eba:	4b1a      	ldr	r3, [pc, #104]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000ebc:	2180      	movs	r1, #128	; 0x80
 8000ebe:	01c9      	lsls	r1, r1, #7
 8000ec0:	430a      	orrs	r2, r1
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec4:	4b17      	ldr	r3, [pc, #92]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000ec6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ec8:	4b16      	ldr	r3, [pc, #88]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000eca:	2102      	movs	r1, #2
 8000ecc:	430a      	orrs	r2, r1
 8000ece:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ed0:	4b14      	ldr	r3, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0x90>)
 8000ed2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	4013      	ands	r3, r2
 8000ed8:	60bb      	str	r3, [r7, #8]
 8000eda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000edc:	210c      	movs	r1, #12
 8000ede:	187b      	adds	r3, r7, r1
 8000ee0:	22c0      	movs	r2, #192	; 0xc0
 8000ee2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	187b      	adds	r3, r7, r1
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	187b      	adds	r3, r7, r1
 8000eec:	2200      	movs	r2, #0
 8000eee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	187b      	adds	r3, r7, r1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8000ef6:	187b      	adds	r3, r7, r1
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000efc:	187b      	adds	r3, r7, r1
 8000efe:	4a0a      	ldr	r2, [pc, #40]	; (8000f28 <HAL_UART_MspInit+0x94>)
 8000f00:	0019      	movs	r1, r3
 8000f02:	0010      	movs	r0, r2
 8000f04:	f000 fbd6 	bl	80016b4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2100      	movs	r1, #0
 8000f0c:	201b      	movs	r0, #27
 8000f0e:	f000 fb57 	bl	80015c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f12:	201b      	movs	r0, #27
 8000f14:	f000 fb69 	bl	80015ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	b008      	add	sp, #32
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	40013800 	.word	0x40013800
 8000f24:	40021000 	.word	0x40021000
 8000f28:	50000400 	.word	0x50000400

08000f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000f2c:	480d      	ldr	r0, [pc, #52]	; (8000f64 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000f2e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 8000f30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f32:	e003      	b.n	8000f3c <LoopCopyDataInit>

08000f34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f34:	4b0c      	ldr	r3, [pc, #48]	; (8000f68 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8000f36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f3a:	3104      	adds	r1, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f3c:	480b      	ldr	r0, [pc, #44]	; (8000f6c <LoopForever+0xa>)
  ldr  r3, =_edata
 8000f3e:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <LoopForever+0xe>)
  adds  r2, r0, r1
 8000f40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f44:	d3f6      	bcc.n	8000f34 <CopyDataInit>
  ldr  r2, =_sbss
 8000f46:	4a0b      	ldr	r2, [pc, #44]	; (8000f74 <LoopForever+0x12>)
  b  LoopFillZerobss
 8000f48:	e002      	b.n	8000f50 <LoopFillZerobss>

08000f4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8000f4a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f4c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4e:	3204      	adds	r2, #4

08000f50 <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <LoopForever+0x16>)
  cmp  r2, r3
 8000f52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f54:	d3f9      	bcc.n	8000f4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f56:	f7ff fda1 	bl	8000a9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f5a:	f002 fec5 	bl	8003ce8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5e:	f7ff fc13 	bl	8000788 <main>

08000f62 <LoopForever>:

LoopForever:
    b LoopForever
 8000f62:	e7fe      	b.n	8000f62 <LoopForever>
   ldr   r0, =_estack
 8000f64:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8000f68:	08003dd4 	.word	0x08003dd4
  ldr  r0, =_sdata
 8000f6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f70:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000f74:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000f78:	20000294 	.word	0x20000294

08000f7c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f7c:	e7fe      	b.n	8000f7c <ADC1_COMP_IRQHandler>
	...

08000f80 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f86:	1dfb      	adds	r3, r7, #7
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <HAL_Init+0x3c>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b0a      	ldr	r3, [pc, #40]	; (8000fbc <HAL_Init+0x3c>)
 8000f92:	2140      	movs	r1, #64	; 0x40
 8000f94:	430a      	orrs	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f000 f811 	bl	8000fc0 <HAL_InitTick>
 8000f9e:	1e03      	subs	r3, r0, #0
 8000fa0:	d003      	beq.n	8000faa <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000fa2:	1dfb      	adds	r3, r7, #7
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e001      	b.n	8000fae <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000faa:	f7ff fd19 	bl	80009e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
}
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	b002      	add	sp, #8
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	40022000 	.word	0x40022000

08000fc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fc8:	230f      	movs	r3, #15
 8000fca:	18fb      	adds	r3, r7, r3
 8000fcc:	2200      	movs	r2, #0
 8000fce:	701a      	strb	r2, [r3, #0]

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_InitTick+0x50>)
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	23fa      	movs	r3, #250	; 0xfa
 8000fd6:	0099      	lsls	r1, r3, #2
 8000fd8:	0010      	movs	r0, r2
 8000fda:	f7ff f895 	bl	8000108 <__udivsi3>
 8000fde:	0003      	movs	r3, r0
 8000fe0:	0018      	movs	r0, r3
 8000fe2:	f000 fb12 	bl	800160a <HAL_SYSTICK_Config>
 8000fe6:	1e03      	subs	r3, r0, #0
 8000fe8:	d004      	beq.n	8000ff4 <HAL_InitTick+0x34>
  {
    status = HAL_ERROR;
 8000fea:	230f      	movs	r3, #15
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
 8000ff2:	e006      	b.n	8001002 <HAL_InitTick+0x42>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8000ff4:	6879      	ldr	r1, [r7, #4]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	425b      	negs	r3, r3
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 fadf 	bl	80015c0 <HAL_NVIC_SetPriority>
  }

  /* Return function status */
  return status;
 8001002:	230f      	movs	r3, #15
 8001004:	18fb      	adds	r3, r7, r3
 8001006:	781b      	ldrb	r3, [r3, #0]
}
 8001008:	0018      	movs	r0, r3
 800100a:	46bd      	mov	sp, r7
 800100c:	b004      	add	sp, #16
 800100e:	bd80      	pop	{r7, pc}
 8001010:	20000000 	.word	0x20000000

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  uwTick++;
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <HAL_IncTick+0x14>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	1c5a      	adds	r2, r3, #1
 800101e:	4b02      	ldr	r3, [pc, #8]	; (8001028 <HAL_IncTick+0x14>)
 8001020:	601a      	str	r2, [r3, #0]
}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	20000290 	.word	0x20000290

0800102c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  return uwTick;
 8001030:	4b02      	ldr	r3, [pc, #8]	; (800103c <HAL_GetTick+0x10>)
 8001032:	681b      	ldr	r3, [r3, #0]
}
 8001034:	0018      	movs	r0, r3
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	20000290 	.word	0x20000290

08001040 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e159      	b.n	8001306 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001056:	2b00      	cmp	r3, #0
 8001058:	d10a      	bne.n	8001070 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2250      	movs	r2, #80	; 0x50
 8001064:	2100      	movs	r1, #0
 8001066:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	0018      	movs	r0, r3
 800106c:	f7ff fa66 	bl	800053c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001074:	2210      	movs	r2, #16
 8001076:	4013      	ands	r3, r2
 8001078:	2b10      	cmp	r3, #16
 800107a:	d005      	beq.n	8001088 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2204      	movs	r2, #4
 8001084:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8001086:	d00b      	beq.n	80010a0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800108c:	2210      	movs	r2, #16
 800108e:	431a      	orrs	r2, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2250      	movs	r2, #80	; 0x50
 8001098:	2100      	movs	r1, #0
 800109a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e132      	b.n	8001306 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a4:	4a9a      	ldr	r2, [pc, #616]	; (8001310 <HAL_ADC_Init+0x2d0>)
 80010a6:	4013      	ands	r3, r2
 80010a8:	2202      	movs	r2, #2
 80010aa:	431a      	orrs	r2, r3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2203      	movs	r2, #3
 80010b8:	4013      	ands	r3, r2
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d108      	bne.n	80010d0 <HAL_ADC_Init+0x90>
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2201      	movs	r2, #1
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d101      	bne.n	80010d0 <HAL_ADC_Init+0x90>
 80010cc:	2301      	movs	r3, #1
 80010ce:	e000      	b.n	80010d2 <HAL_ADC_Init+0x92>
 80010d0:	2300      	movs	r3, #0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d149      	bne.n	800116a <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	685a      	ldr	r2, [r3, #4]
 80010da:	23c0      	movs	r3, #192	; 0xc0
 80010dc:	061b      	lsls	r3, r3, #24
 80010de:	429a      	cmp	r2, r3
 80010e0:	d00b      	beq.n	80010fa <HAL_ADC_Init+0xba>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	2380      	movs	r3, #128	; 0x80
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	429a      	cmp	r2, r3
 80010ec:	d005      	beq.n	80010fa <HAL_ADC_Init+0xba>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	2380      	movs	r3, #128	; 0x80
 80010f4:	061b      	lsls	r3, r3, #24
 80010f6:	429a      	cmp	r2, r3
 80010f8:	d111      	bne.n	800111e <HAL_ADC_Init+0xde>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	0892      	lsrs	r2, r2, #2
 8001108:	611a      	str	r2, [r3, #16]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6919      	ldr	r1, [r3, #16]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	611a      	str	r2, [r3, #16]
 800111c:	e014      	b.n	8001148 <HAL_ADC_Init+0x108>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	0092      	lsls	r2, r2, #2
 800112a:	0892      	lsrs	r2, r2, #2
 800112c:	611a      	str	r2, [r3, #16]
 800112e:	4b79      	ldr	r3, [pc, #484]	; (8001314 <HAL_ADC_Init+0x2d4>)
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	4b78      	ldr	r3, [pc, #480]	; (8001314 <HAL_ADC_Init+0x2d4>)
 8001134:	4978      	ldr	r1, [pc, #480]	; (8001318 <HAL_ADC_Init+0x2d8>)
 8001136:	400a      	ands	r2, r1
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	4b76      	ldr	r3, [pc, #472]	; (8001314 <HAL_ADC_Init+0x2d4>)
 800113c:	6819      	ldr	r1, [r3, #0]
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685a      	ldr	r2, [r3, #4]
 8001142:	4b74      	ldr	r3, [pc, #464]	; (8001314 <HAL_ADC_Init+0x2d4>)
 8001144:	430a      	orrs	r2, r1
 8001146:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	2118      	movs	r1, #24
 8001154:	438a      	bics	r2, r1
 8001156:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68d9      	ldr	r1, [r3, #12]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689a      	ldr	r2, [r3, #8]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	430a      	orrs	r2, r1
 8001168:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800116a:	4b6a      	ldr	r3, [pc, #424]	; (8001314 <HAL_ADC_Init+0x2d4>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4b69      	ldr	r3, [pc, #420]	; (8001314 <HAL_ADC_Init+0x2d4>)
 8001170:	496a      	ldr	r1, [pc, #424]	; (800131c <HAL_ADC_Init+0x2dc>)
 8001172:	400a      	ands	r2, r1
 8001174:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001176:	4b67      	ldr	r3, [pc, #412]	; (8001314 <HAL_ADC_Init+0x2d4>)
 8001178:	6819      	ldr	r1, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800117e:	065a      	lsls	r2, r3, #25
 8001180:	4b64      	ldr	r3, [pc, #400]	; (8001314 <HAL_ADC_Init+0x2d4>)
 8001182:	430a      	orrs	r2, r1
 8001184:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	689a      	ldr	r2, [r3, #8]
 800118c:	2380      	movs	r3, #128	; 0x80
 800118e:	055b      	lsls	r3, r3, #21
 8001190:	4013      	ands	r3, r2
 8001192:	d108      	bne.n	80011a6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	689a      	ldr	r2, [r3, #8]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	2180      	movs	r1, #128	; 0x80
 80011a0:	0549      	lsls	r1, r1, #21
 80011a2:	430a      	orrs	r2, r1
 80011a4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	495b      	ldr	r1, [pc, #364]	; (8001320 <HAL_ADC_Init+0x2e0>)
 80011b2:	400a      	ands	r2, r1
 80011b4:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	68d9      	ldr	r1, [r3, #12]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d101      	bne.n	80011cc <HAL_ADC_Init+0x18c>
 80011c8:	2304      	movs	r3, #4
 80011ca:	e000      	b.n	80011ce <HAL_ADC_Init+0x18e>
 80011cc:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011ce:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2020      	movs	r0, #32
 80011d4:	5c1b      	ldrb	r3, [r3, r0]
 80011d6:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80011d8:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	202c      	movs	r0, #44	; 0x2c
 80011de:	5c1b      	ldrb	r3, [r3, r0]
 80011e0:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80011e2:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80011e8:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	699b      	ldr	r3, [r3, #24]
 80011ee:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80011f0:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	69db      	ldr	r3, [r3, #28]
 80011f6:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80011f8:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	430a      	orrs	r2, r1
 8001200:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001206:	23c2      	movs	r3, #194	; 0xc2
 8001208:	33ff      	adds	r3, #255	; 0xff
 800120a:	429a      	cmp	r2, r3
 800120c:	d00b      	beq.n	8001226 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	68d9      	ldr	r1, [r3, #12]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2221      	movs	r2, #33	; 0x21
 800122a:	5c9b      	ldrb	r3, [r3, r2]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d11a      	bne.n	8001266 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2220      	movs	r2, #32
 8001234:	5c9b      	ldrb	r3, [r3, r2]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d109      	bne.n	800124e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	68da      	ldr	r2, [r3, #12]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2180      	movs	r1, #128	; 0x80
 8001246:	0249      	lsls	r1, r1, #9
 8001248:	430a      	orrs	r2, r1
 800124a:	60da      	str	r2, [r3, #12]
 800124c:	e00b      	b.n	8001266 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001252:	2220      	movs	r2, #32
 8001254:	431a      	orrs	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125e:	2201      	movs	r2, #1
 8001260:	431a      	orrs	r2, r3
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800126a:	2b01      	cmp	r3, #1
 800126c:	d11f      	bne.n	80012ae <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	492a      	ldr	r1, [pc, #168]	; (8001324 <HAL_ADC_Init+0x2e4>)
 800127a:	400a      	ands	r2, r1
 800127c:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	6919      	ldr	r1, [r3, #16]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800128c:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 8001292:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	691a      	ldr	r2, [r3, #16]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2101      	movs	r1, #1
 80012a8:	430a      	orrs	r2, r1
 80012aa:	611a      	str	r2, [r3, #16]
 80012ac:	e00e      	b.n	80012cc <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4013      	ands	r3, r2
 80012b8:	2b01      	cmp	r3, #1
 80012ba:	d107      	bne.n	80012cc <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	691a      	ldr	r2, [r3, #16]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	2101      	movs	r1, #1
 80012c8:	438a      	bics	r2, r1
 80012ca:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	695a      	ldr	r2, [r3, #20]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	2107      	movs	r1, #7
 80012d8:	438a      	bics	r2, r1
 80012da:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	6959      	ldr	r1, [r3, #20]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2200      	movs	r2, #0
 80012f2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012f8:	2203      	movs	r2, #3
 80012fa:	4393      	bics	r3, r2
 80012fc:	2201      	movs	r2, #1
 80012fe:	431a      	orrs	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001304:	2300      	movs	r3, #0
}
 8001306:	0018      	movs	r0, r3
 8001308:	46bd      	mov	sp, r7
 800130a:	b002      	add	sp, #8
 800130c:	bd80      	pop	{r7, pc}
 800130e:	46c0      	nop			; (mov r8, r8)
 8001310:	fffffefd 	.word	0xfffffefd
 8001314:	40012708 	.word	0x40012708
 8001318:	ffc3ffff 	.word	0xffc3ffff
 800131c:	fdffffff 	.word	0xfdffffff
 8001320:	fffe0219 	.word	0xfffe0219
 8001324:	fffffc03 	.word	0xfffffc03

08001328 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b082      	sub	sp, #8
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2250      	movs	r2, #80	; 0x50
 8001336:	5c9b      	ldrb	r3, [r3, r2]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <HAL_ADC_ConfigChannel+0x18>
 800133c:	2302      	movs	r3, #2
 800133e:	e06c      	b.n	800141a <HAL_ADC_ConfigChannel+0xf2>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2250      	movs	r2, #80	; 0x50
 8001344:	2101      	movs	r1, #1
 8001346:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	2204      	movs	r2, #4
 8001350:	4013      	ands	r3, r2
 8001352:	d00b      	beq.n	800136c <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001358:	2220      	movs	r2, #32
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2250      	movs	r2, #80	; 0x50
 8001364:	2100      	movs	r1, #0
 8001366:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e056      	b.n	800141a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	4a2c      	ldr	r2, [pc, #176]	; (8001424 <HAL_ADC_ConfigChannel+0xfc>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d028      	beq.n	80013c8 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	035b      	lsls	r3, r3, #13
 8001382:	0b5a      	lsrs	r2, r3, #13
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	430a      	orrs	r2, r1
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	02db      	lsls	r3, r3, #11
 8001394:	4013      	ands	r3, r2
 8001396:	d009      	beq.n	80013ac <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_ADC_ConfigChannel+0x100>)
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	4b22      	ldr	r3, [pc, #136]	; (8001428 <HAL_ADC_ConfigChannel+0x100>)
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0409      	lsls	r1, r1, #16
 80013a2:	430a      	orrs	r2, r1
 80013a4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80013a6:	200a      	movs	r0, #10
 80013a8:	f000 f844 	bl	8001434 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	2380      	movs	r3, #128	; 0x80
 80013b2:	029b      	lsls	r3, r3, #10
 80013b4:	4013      	ands	r3, r2
 80013b6:	d02b      	beq.n	8001410 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80013b8:	4b1b      	ldr	r3, [pc, #108]	; (8001428 <HAL_ADC_ConfigChannel+0x100>)
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <HAL_ADC_ConfigChannel+0x100>)
 80013be:	2180      	movs	r1, #128	; 0x80
 80013c0:	03c9      	lsls	r1, r1, #15
 80013c2:	430a      	orrs	r2, r1
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	e023      	b.n	8001410 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	035b      	lsls	r3, r3, #13
 80013d4:	0b5b      	lsrs	r3, r3, #13
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	400a      	ands	r2, r1
 80013de:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	02db      	lsls	r3, r3, #11
 80013e8:	4013      	ands	r3, r2
 80013ea:	d005      	beq.n	80013f8 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80013ec:	4b0e      	ldr	r3, [pc, #56]	; (8001428 <HAL_ADC_ConfigChannel+0x100>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_ADC_ConfigChannel+0x100>)
 80013f2:	490e      	ldr	r1, [pc, #56]	; (800142c <HAL_ADC_ConfigChannel+0x104>)
 80013f4:	400a      	ands	r2, r1
 80013f6:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	2380      	movs	r3, #128	; 0x80
 80013fe:	029b      	lsls	r3, r3, #10
 8001400:	4013      	ands	r3, r2
 8001402:	d005      	beq.n	8001410 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001404:	4b08      	ldr	r3, [pc, #32]	; (8001428 <HAL_ADC_ConfigChannel+0x100>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b07      	ldr	r3, [pc, #28]	; (8001428 <HAL_ADC_ConfigChannel+0x100>)
 800140a:	4909      	ldr	r1, [pc, #36]	; (8001430 <HAL_ADC_ConfigChannel+0x108>)
 800140c:	400a      	ands	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2250      	movs	r2, #80	; 0x50
 8001414:	2100      	movs	r1, #0
 8001416:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	0018      	movs	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	b002      	add	sp, #8
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	00001001 	.word	0x00001001
 8001428:	40012708 	.word	0x40012708
 800142c:	ff7fffff 	.word	0xff7fffff
 8001430:	ffbfffff 	.word	0xffbfffff

08001434 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <ADC_DelayMicroSecond+0x34>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	490a      	ldr	r1, [pc, #40]	; (800146c <ADC_DelayMicroSecond+0x38>)
 8001442:	0018      	movs	r0, r3
 8001444:	f7fe fe60 	bl	8000108 <__udivsi3>
 8001448:	0003      	movs	r3, r0
 800144a:	001a      	movs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4353      	muls	r3, r2
 8001450:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 8001452:	e002      	b.n	800145a <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3b01      	subs	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f9      	bne.n	8001454 <ADC_DelayMicroSecond+0x20>
  } 
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b004      	add	sp, #16
 8001466:	bd80      	pop	{r7, pc}
 8001468:	20000000 	.word	0x20000000
 800146c:	000f4240 	.word	0x000f4240

08001470 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	0002      	movs	r2, r0
 8001478:	1dfb      	adds	r3, r7, #7
 800147a:	701a      	strb	r2, [r3, #0]
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800147c:	1dfb      	adds	r3, r7, #7
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	001a      	movs	r2, r3
 8001482:	231f      	movs	r3, #31
 8001484:	401a      	ands	r2, r3
 8001486:	4b04      	ldr	r3, [pc, #16]	; (8001498 <NVIC_EnableIRQ+0x28>)
 8001488:	2101      	movs	r1, #1
 800148a:	4091      	lsls	r1, r2
 800148c:	000a      	movs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
}
 8001490:	46c0      	nop			; (mov r8, r8)
 8001492:	46bd      	mov	sp, r7
 8001494:	b002      	add	sp, #8
 8001496:	bd80      	pop	{r7, pc}
 8001498:	e000e100 	.word	0xe000e100

0800149c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	0002      	movs	r2, r0
 80014a4:	6039      	str	r1, [r7, #0]
 80014a6:	1dfb      	adds	r3, r7, #7
 80014a8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) < 0)
 80014aa:	1dfb      	adds	r3, r7, #7
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	2b7f      	cmp	r3, #127	; 0x7f
 80014b0:	d932      	bls.n	8001518 <NVIC_SetPriority+0x7c>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014b2:	4a2f      	ldr	r2, [pc, #188]	; (8001570 <NVIC_SetPriority+0xd4>)
 80014b4:	1dfb      	adds	r3, r7, #7
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	0019      	movs	r1, r3
 80014ba:	230f      	movs	r3, #15
 80014bc:	400b      	ands	r3, r1
 80014be:	3b08      	subs	r3, #8
 80014c0:	089b      	lsrs	r3, r3, #2
 80014c2:	3306      	adds	r3, #6
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	18d3      	adds	r3, r2, r3
 80014c8:	3304      	adds	r3, #4
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	1dfa      	adds	r2, r7, #7
 80014ce:	7812      	ldrb	r2, [r2, #0]
 80014d0:	0011      	movs	r1, r2
 80014d2:	2203      	movs	r2, #3
 80014d4:	400a      	ands	r2, r1
 80014d6:	00d2      	lsls	r2, r2, #3
 80014d8:	21ff      	movs	r1, #255	; 0xff
 80014da:	4091      	lsls	r1, r2
 80014dc:	000a      	movs	r2, r1
 80014de:	43d2      	mvns	r2, r2
 80014e0:	401a      	ands	r2, r3
 80014e2:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	019b      	lsls	r3, r3, #6
 80014e8:	22ff      	movs	r2, #255	; 0xff
 80014ea:	401a      	ands	r2, r3
 80014ec:	1dfb      	adds	r3, r7, #7
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	0018      	movs	r0, r3
 80014f2:	2303      	movs	r3, #3
 80014f4:	4003      	ands	r3, r0
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014fa:	481d      	ldr	r0, [pc, #116]	; (8001570 <NVIC_SetPriority+0xd4>)
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	001c      	movs	r4, r3
 8001502:	230f      	movs	r3, #15
 8001504:	4023      	ands	r3, r4
 8001506:	3b08      	subs	r3, #8
 8001508:	089b      	lsrs	r3, r3, #2
 800150a:	430a      	orrs	r2, r1
 800150c:	3306      	adds	r3, #6
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	18c3      	adds	r3, r0, r3
 8001512:	3304      	adds	r3, #4
 8001514:	601a      	str	r2, [r3, #0]
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001516:	e027      	b.n	8001568 <NVIC_SetPriority+0xcc>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001518:	4a16      	ldr	r2, [pc, #88]	; (8001574 <NVIC_SetPriority+0xd8>)
 800151a:	1dfb      	adds	r3, r7, #7
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	b25b      	sxtb	r3, r3
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	33c0      	adds	r3, #192	; 0xc0
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	589b      	ldr	r3, [r3, r2]
 8001528:	1dfa      	adds	r2, r7, #7
 800152a:	7812      	ldrb	r2, [r2, #0]
 800152c:	0011      	movs	r1, r2
 800152e:	2203      	movs	r2, #3
 8001530:	400a      	ands	r2, r1
 8001532:	00d2      	lsls	r2, r2, #3
 8001534:	21ff      	movs	r1, #255	; 0xff
 8001536:	4091      	lsls	r1, r2
 8001538:	000a      	movs	r2, r1
 800153a:	43d2      	mvns	r2, r2
 800153c:	401a      	ands	r2, r3
 800153e:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	019b      	lsls	r3, r3, #6
 8001544:	22ff      	movs	r2, #255	; 0xff
 8001546:	401a      	ands	r2, r3
 8001548:	1dfb      	adds	r3, r7, #7
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	0018      	movs	r0, r3
 800154e:	2303      	movs	r3, #3
 8001550:	4003      	ands	r3, r0
 8001552:	00db      	lsls	r3, r3, #3
 8001554:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001556:	4807      	ldr	r0, [pc, #28]	; (8001574 <NVIC_SetPriority+0xd8>)
 8001558:	1dfb      	adds	r3, r7, #7
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	b25b      	sxtb	r3, r3
 800155e:	089b      	lsrs	r3, r3, #2
 8001560:	430a      	orrs	r2, r1
 8001562:	33c0      	adds	r3, #192	; 0xc0
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	501a      	str	r2, [r3, r0]
}
 8001568:	46c0      	nop			; (mov r8, r8)
 800156a:	46bd      	mov	sp, r7
 800156c:	b003      	add	sp, #12
 800156e:	bd90      	pop	{r4, r7, pc}
 8001570:	e000ed00 	.word	0xe000ed00
 8001574:	e000e100 	.word	0xe000e100

08001578 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3b01      	subs	r3, #1
 8001584:	4a0c      	ldr	r2, [pc, #48]	; (80015b8 <SysTick_Config+0x40>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800158a:	2301      	movs	r3, #1
 800158c:	e010      	b.n	80015b0 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800158e:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <SysTick_Config+0x44>)
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	3a01      	subs	r2, #1
 8001594:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001596:	2301      	movs	r3, #1
 8001598:	425b      	negs	r3, r3
 800159a:	2103      	movs	r1, #3
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff ff7d 	bl	800149c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <SysTick_Config+0x44>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <SysTick_Config+0x44>)
 80015aa:	2207      	movs	r2, #7
 80015ac:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	00ffffff 	.word	0x00ffffff
 80015bc:	e000e010 	.word	0xe000e010

080015c0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60b9      	str	r1, [r7, #8]
 80015c8:	607a      	str	r2, [r7, #4]
 80015ca:	210f      	movs	r1, #15
 80015cc:	187b      	adds	r3, r7, r1
 80015ce:	1c02      	adds	r2, r0, #0
 80015d0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	187b      	adds	r3, r7, r1
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b25b      	sxtb	r3, r3
 80015da:	0011      	movs	r1, r2
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff ff5d 	bl	800149c <NVIC_SetPriority>
}
 80015e2:	46c0      	nop			; (mov r8, r8)
 80015e4:	46bd      	mov	sp, r7
 80015e6:	b004      	add	sp, #16
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	0002      	movs	r2, r0
 80015f2:	1dfb      	adds	r3, r7, #7
 80015f4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f6:	1dfb      	adds	r3, r7, #7
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	b25b      	sxtb	r3, r3
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff ff37 	bl	8001470 <NVIC_EnableIRQ>
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b002      	add	sp, #8
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff ffaf 	bl	8001578 <SysTick_Config>
 800161a:	0003      	movs	r3, r0
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800162c:	230f      	movs	r3, #15
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2225      	movs	r2, #37	; 0x25
 8001638:	5c9b      	ldrb	r3, [r3, r2]
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d007      	beq.n	8001650 <HAL_DMA_Abort_IT+0x2c>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2204      	movs	r2, #4
 8001644:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001646:	230f      	movs	r3, #15
 8001648:	18fb      	adds	r3, r7, r3
 800164a:	2201      	movs	r2, #1
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	e02a      	b.n	80016a6 <HAL_DMA_Abort_IT+0x82>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	210e      	movs	r1, #14
 800165c:	438a      	bics	r2, r1
 800165e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2101      	movs	r1, #1
 800166c:	438a      	bics	r2, r1
 800166e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	221c      	movs	r2, #28
 8001676:	401a      	ands	r2, r3
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	2101      	movs	r1, #1
 800167e:	4091      	lsls	r1, r2
 8001680:	000a      	movs	r2, r1
 8001682:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2225      	movs	r2, #37	; 0x25
 8001688:	2101      	movs	r1, #1
 800168a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2224      	movs	r2, #36	; 0x24
 8001690:	2100      	movs	r1, #0
 8001692:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001698:	2b00      	cmp	r3, #0
 800169a:	d004      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x82>
    {
      hdma->XferAbortCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	0010      	movs	r0, r2
 80016a4:	4798      	blx	r3
    }
  }
  return status;
 80016a6:	230f      	movs	r3, #15
 80016a8:	18fb      	adds	r3, r7, r3
 80016aa:	781b      	ldrb	r3, [r3, #0]
}
 80016ac:	0018      	movs	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	b004      	add	sp, #16
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80016c6:	2300      	movs	r3, #0
 80016c8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,(GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80016ca:	e14f      	b.n	800196c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2101      	movs	r1, #1
 80016d2:	697a      	ldr	r2, [r7, #20]
 80016d4:	4091      	lsls	r1, r2
 80016d6:	000a      	movs	r2, r1
 80016d8:	4013      	ands	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
    
    if(iocurrent)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d100      	bne.n	80016e4 <HAL_GPIO_Init+0x30>
 80016e2:	e140      	b.n	8001966 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d003      	beq.n	80016f4 <HAL_GPIO_Init+0x40>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	2b12      	cmp	r3, #18
 80016f2:	d123      	bne.n	800173c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */ 
        temp = GPIOx->AFR[position >> 3U];
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	08da      	lsrs	r2, r3, #3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	3208      	adds	r2, #8
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	58d3      	ldr	r3, [r2, r3]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	2207      	movs	r2, #7
 8001706:	4013      	ands	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	220f      	movs	r2, #15
 800170c:	409a      	lsls	r2, r3
 800170e:	0013      	movs	r3, r2
 8001710:	43da      	mvns	r2, r3
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4013      	ands	r3, r2
 8001716:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	691a      	ldr	r2, [r3, #16]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	2107      	movs	r1, #7
 8001720:	400b      	ands	r3, r1
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4313      	orrs	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	08da      	lsrs	r2, r3, #3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	3208      	adds	r2, #8
 8001736:	0092      	lsls	r2, r2, #2
 8001738:	6939      	ldr	r1, [r7, #16]
 800173a:	50d1      	str	r1, [r2, r3]
      } 

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d00b      	beq.n	800175c <HAL_GPIO_Init+0xa8>
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d007      	beq.n	800175c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001750:	2b11      	cmp	r3, #17
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0xa8>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	2b12      	cmp	r3, #18
 800175a:	d130      	bne.n	80017be <HAL_GPIO_Init+0x10a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	2203      	movs	r2, #3
 8001768:	409a      	lsls	r2, r3
 800176a:	0013      	movs	r3, r2
 800176c:	43da      	mvns	r2, r3
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4013      	ands	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68da      	ldr	r2, [r3, #12]
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	409a      	lsls	r2, r3
 800177e:	0013      	movs	r3, r2
 8001780:	693a      	ldr	r2, [r7, #16]
 8001782:	4313      	orrs	r3, r2
 8001784:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp= GPIOx->OTYPER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001792:	2201      	movs	r2, #1
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	409a      	lsls	r2, r3
 8001798:	0013      	movs	r3, r2
 800179a:	43da      	mvns	r2, r3
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	091b      	lsrs	r3, r3, #4
 80017a8:	2201      	movs	r2, #1
 80017aa:	401a      	ands	r2, r3
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	409a      	lsls	r2, r3
 80017b0:	0013      	movs	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	605a      	str	r2, [r3, #4]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	2203      	movs	r2, #3
 80017ca:	409a      	lsls	r2, r3
 80017cc:	0013      	movs	r3, r2
 80017ce:	43da      	mvns	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	4013      	ands	r3, r2
 80017d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	2203      	movs	r2, #3
 80017dc:	401a      	ands	r2, r3
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	409a      	lsls	r2, r3
 80017e4:	0013      	movs	r3, r2
 80017e6:	693a      	ldr	r2, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	601a      	str	r2, [r3, #0]

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	68db      	ldr	r3, [r3, #12]
 80017f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	2203      	movs	r2, #3
 80017fe:	409a      	lsls	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	43da      	mvns	r2, r3
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	4013      	ands	r3, r2
 8001808:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	689a      	ldr	r2, [r3, #8]
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	005b      	lsls	r3, r3, #1
 8001812:	409a      	lsls	r2, r3
 8001814:	0013      	movs	r3, r2
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	2380      	movs	r3, #128	; 0x80
 8001828:	055b      	lsls	r3, r3, #21
 800182a:	4013      	ands	r3, r2
 800182c:	d100      	bne.n	8001830 <HAL_GPIO_Init+0x17c>
 800182e:	e09a      	b.n	8001966 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001830:	4b54      	ldr	r3, [pc, #336]	; (8001984 <HAL_GPIO_Init+0x2d0>)
 8001832:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001834:	4b53      	ldr	r3, [pc, #332]	; (8001984 <HAL_GPIO_Init+0x2d0>)
 8001836:	2101      	movs	r1, #1
 8001838:	430a      	orrs	r2, r1
 800183a:	635a      	str	r2, [r3, #52]	; 0x34
        
        temp = SYSCFG->EXTICR[position >> 2U];
 800183c:	4a52      	ldr	r2, [pc, #328]	; (8001988 <HAL_GPIO_Init+0x2d4>)
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	089b      	lsrs	r3, r3, #2
 8001842:	3302      	adds	r3, #2
 8001844:	009b      	lsls	r3, r3, #2
 8001846:	589b      	ldr	r3, [r3, r2]
 8001848:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	2203      	movs	r2, #3
 800184e:	4013      	ands	r3, r2
 8001850:	009b      	lsls	r3, r3, #2
 8001852:	220f      	movs	r2, #15
 8001854:	409a      	lsls	r2, r3
 8001856:	0013      	movs	r3, r2
 8001858:	43da      	mvns	r2, r3
 800185a:	693b      	ldr	r3, [r7, #16]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	23a0      	movs	r3, #160	; 0xa0
 8001864:	05db      	lsls	r3, r3, #23
 8001866:	429a      	cmp	r2, r3
 8001868:	d019      	beq.n	800189e <HAL_GPIO_Init+0x1ea>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a47      	ldr	r2, [pc, #284]	; (800198c <HAL_GPIO_Init+0x2d8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d013      	beq.n	800189a <HAL_GPIO_Init+0x1e6>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a46      	ldr	r2, [pc, #280]	; (8001990 <HAL_GPIO_Init+0x2dc>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d00d      	beq.n	8001896 <HAL_GPIO_Init+0x1e2>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a45      	ldr	r2, [pc, #276]	; (8001994 <HAL_GPIO_Init+0x2e0>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d007      	beq.n	8001892 <HAL_GPIO_Init+0x1de>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a44      	ldr	r2, [pc, #272]	; (8001998 <HAL_GPIO_Init+0x2e4>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d101      	bne.n	800188e <HAL_GPIO_Init+0x1da>
 800188a:	2305      	movs	r3, #5
 800188c:	e008      	b.n	80018a0 <HAL_GPIO_Init+0x1ec>
 800188e:	2306      	movs	r3, #6
 8001890:	e006      	b.n	80018a0 <HAL_GPIO_Init+0x1ec>
 8001892:	2303      	movs	r3, #3
 8001894:	e004      	b.n	80018a0 <HAL_GPIO_Init+0x1ec>
 8001896:	2302      	movs	r3, #2
 8001898:	e002      	b.n	80018a0 <HAL_GPIO_Init+0x1ec>
 800189a:	2301      	movs	r3, #1
 800189c:	e000      	b.n	80018a0 <HAL_GPIO_Init+0x1ec>
 800189e:	2300      	movs	r3, #0
 80018a0:	697a      	ldr	r2, [r7, #20]
 80018a2:	2103      	movs	r1, #3
 80018a4:	400a      	ands	r2, r1
 80018a6:	0092      	lsls	r2, r2, #2
 80018a8:	4093      	lsls	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b0:	4935      	ldr	r1, [pc, #212]	; (8001988 <HAL_GPIO_Init+0x2d4>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	505a      	str	r2, [r3, r1]
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018be:	4b37      	ldr	r3, [pc, #220]	; (800199c <HAL_GPIO_Init+0x2e8>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	43da      	mvns	r2, r3
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	4013      	ands	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	025b      	lsls	r3, r3, #9
 80018d6:	4013      	ands	r3, r2
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_GPIO_Init+0x2e8>)
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80018e8:	4b2c      	ldr	r3, [pc, #176]	; (800199c <HAL_GPIO_Init+0x2e8>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	43da      	mvns	r2, r3
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	4013      	ands	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	029b      	lsls	r3, r3, #10
 8001900:	4013      	ands	r3, r2
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001904:	693a      	ldr	r2, [r7, #16]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800190c:	4b23      	ldr	r3, [pc, #140]	; (800199c <HAL_GPIO_Init+0x2e8>)
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001912:	4b22      	ldr	r3, [pc, #136]	; (800199c <HAL_GPIO_Init+0x2e8>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	43da      	mvns	r2, r3
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	4013      	ands	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685a      	ldr	r2, [r3, #4]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	035b      	lsls	r3, r3, #13
 800192a:	4013      	ands	r3, r2
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800192e:	693a      	ldr	r2, [r7, #16]
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	4313      	orrs	r3, r2
 8001934:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001936:	4b19      	ldr	r3, [pc, #100]	; (800199c <HAL_GPIO_Init+0x2e8>)
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800193c:	4b17      	ldr	r3, [pc, #92]	; (800199c <HAL_GPIO_Init+0x2e8>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43da      	mvns	r2, r3
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	2380      	movs	r3, #128	; 0x80
 8001952:	039b      	lsls	r3, r3, #14
 8001954:	4013      	ands	r3, r2
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001960:	4b0e      	ldr	r3, [pc, #56]	; (800199c <HAL_GPIO_Init+0x2e8>)
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3301      	adds	r3, #1
 800196a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	40da      	lsrs	r2, r3
 8001974:	1e13      	subs	r3, r2, #0
 8001976:	d000      	beq.n	800197a <HAL_GPIO_Init+0x2c6>
 8001978:	e6a8      	b.n	80016cc <HAL_GPIO_Init+0x18>
  }
}
 800197a:	46c0      	nop			; (mov r8, r8)
 800197c:	46bd      	mov	sp, r7
 800197e:	b006      	add	sp, #24
 8001980:	bd80      	pop	{r7, pc}
 8001982:	46c0      	nop			; (mov r8, r8)
 8001984:	40021000 	.word	0x40021000
 8001988:	40010000 	.word	0x40010000
 800198c:	50000400 	.word	0x50000400
 8001990:	50000800 	.word	0x50000800
 8001994:	50000c00 	.word	0x50000c00
 8001998:	50001c00 	.word	0x50001c00
 800199c:	40010400 	.word	0x40010400

080019a0 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
 80019a8:	0008      	movs	r0, r1
 80019aa:	0011      	movs	r1, r2
 80019ac:	1cbb      	adds	r3, r7, #2
 80019ae:	1c02      	adds	r2, r0, #0
 80019b0:	801a      	strh	r2, [r3, #0]
 80019b2:	1c7b      	adds	r3, r7, #1
 80019b4:	1c0a      	adds	r2, r1, #0
 80019b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80019b8:	1c7b      	adds	r3, r7, #1
 80019ba:	781b      	ldrb	r3, [r3, #0]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019c0:	1cbb      	adds	r3, r7, #2
 80019c2:	881a      	ldrh	r2, [r3, #0]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80019c8:	e003      	b.n	80019d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80019ca:	1cbb      	adds	r3, r7, #2
 80019cc:	881a      	ldrh	r2, [r3, #0]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	46bd      	mov	sp, r7
 80019d6:	b002      	add	sp, #8
 80019d8:	bd80      	pop	{r7, pc}
	...

080019dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d101      	bne.n	80019ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e082      	b.n	8001af4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2241      	movs	r2, #65	; 0x41
 80019f2:	5c9b      	ldrb	r3, [r3, r2]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d107      	bne.n	8001a0a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2240      	movs	r2, #64	; 0x40
 80019fe:	2100      	movs	r1, #0
 8001a00:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	0018      	movs	r0, r3
 8001a06:	f7fe fe79 	bl	80006fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2241      	movs	r2, #65	; 0x41
 8001a0e:	2124      	movs	r1, #36	; 0x24
 8001a10:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2101      	movs	r1, #1
 8001a1e:	438a      	bics	r2, r1
 8001a20:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685a      	ldr	r2, [r3, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4934      	ldr	r1, [pc, #208]	; (8001afc <HAL_I2C_Init+0x120>)
 8001a2c:	400a      	ands	r2, r1
 8001a2e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4931      	ldr	r1, [pc, #196]	; (8001b00 <HAL_I2C_Init+0x124>)
 8001a3c:	400a      	ands	r2, r1
 8001a3e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	d108      	bne.n	8001a5a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0209      	lsls	r1, r1, #8
 8001a54:	430a      	orrs	r2, r1
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	e007      	b.n	8001a6a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2184      	movs	r1, #132	; 0x84
 8001a64:	0209      	lsls	r1, r1, #8
 8001a66:	430a      	orrs	r2, r1
 8001a68:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	d104      	bne.n	8001a7c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	491f      	ldr	r1, [pc, #124]	; (8001b04 <HAL_I2C_Init+0x128>)
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	68da      	ldr	r2, [r3, #12]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	491a      	ldr	r1, [pc, #104]	; (8001b00 <HAL_I2C_Init+0x124>)
 8001a98:	400a      	ands	r2, r1
 8001a9a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	695b      	ldr	r3, [r3, #20]
 8001aa4:	431a      	orrs	r2, r3
 8001aa6:	0011      	movs	r1, r2
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	021a      	lsls	r2, r3, #8
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	69d9      	ldr	r1, [r3, #28]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	430a      	orrs	r2, r1
 8001ac4:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2241      	movs	r2, #65	; 0x41
 8001ae0:	2120      	movs	r1, #32
 8001ae2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2242      	movs	r2, #66	; 0x42
 8001aee:	2100      	movs	r1, #0
 8001af0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	0018      	movs	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	b002      	add	sp, #8
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	f0ffffff 	.word	0xf0ffffff
 8001b00:	ffff7fff 	.word	0xffff7fff
 8001b04:	02008000 	.word	0x02008000

08001b08 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
 8001b10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2241      	movs	r2, #65	; 0x41
 8001b16:	5c9b      	ldrb	r3, [r3, r2]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b20      	cmp	r3, #32
 8001b1c:	d138      	bne.n	8001b90 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2240      	movs	r2, #64	; 0x40
 8001b22:	5c9b      	ldrb	r3, [r3, r2]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d101      	bne.n	8001b2c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001b28:	2302      	movs	r3, #2
 8001b2a:	e032      	b.n	8001b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2240      	movs	r2, #64	; 0x40
 8001b30:	2101      	movs	r1, #1
 8001b32:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2241      	movs	r2, #65	; 0x41
 8001b38:	2124      	movs	r1, #36	; 0x24
 8001b3a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2101      	movs	r1, #1
 8001b48:	438a      	bics	r2, r1
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4911      	ldr	r1, [pc, #68]	; (8001b9c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001b58:	400a      	ands	r2, r1
 8001b5a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6819      	ldr	r1, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	430a      	orrs	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2101      	movs	r1, #1
 8001b78:	430a      	orrs	r2, r1
 8001b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2241      	movs	r2, #65	; 0x41
 8001b80:	2120      	movs	r1, #32
 8001b82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	2100      	movs	r1, #0
 8001b8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	e000      	b.n	8001b92 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001b90:	2302      	movs	r3, #2
  }
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	46c0      	nop			; (mov r8, r8)
 8001b9c:	ffffefff 	.word	0xffffefff

08001ba0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2241      	movs	r2, #65	; 0x41
 8001bae:	5c9b      	ldrb	r3, [r3, r2]
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b20      	cmp	r3, #32
 8001bb4:	d139      	bne.n	8001c2a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	5c9b      	ldrb	r3, [r3, r2]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e033      	b.n	8001c2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2240      	movs	r2, #64	; 0x40
 8001bc8:	2101      	movs	r1, #1
 8001bca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2241      	movs	r2, #65	; 0x41
 8001bd0:	2124      	movs	r1, #36	; 0x24
 8001bd2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	2101      	movs	r1, #1
 8001be0:	438a      	bics	r2, r1
 8001be2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	4a11      	ldr	r2, [pc, #68]	; (8001c34 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	68fa      	ldr	r2, [r7, #12]
 8001c04:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2101      	movs	r1, #1
 8001c12:	430a      	orrs	r2, r1
 8001c14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2241      	movs	r2, #65	; 0x41
 8001c1a:	2120      	movs	r1, #32
 8001c1c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2240      	movs	r2, #64	; 0x40
 8001c22:	2100      	movs	r1, #0
 8001c24:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e000      	b.n	8001c2c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001c2a:	2302      	movs	r3, #2
  }
}
 8001c2c:	0018      	movs	r0, r3
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	b004      	add	sp, #16
 8001c32:	bd80      	pop	{r7, pc}
 8001c34:	fffff0ff 	.word	0xfffff0ff

08001c38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c38:	b5b0      	push	{r4, r5, r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c46:	2301      	movs	r3, #1
 8001c48:	f000 fb58 	bl	80022fc <HAL_RCC_OscConfig+0x6c4>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4c:	4bcd      	ldr	r3, [pc, #820]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	220c      	movs	r2, #12
 8001c52:	4013      	ands	r3, r2
 8001c54:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c56:	4bcb      	ldr	r3, [pc, #812]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	025b      	lsls	r3, r3, #9
 8001c5e:	4013      	ands	r3, r2
 8001c60:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2201      	movs	r2, #1
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d100      	bne.n	8001c6e <HAL_RCC_OscConfig+0x36>
 8001c6c:	e07c      	b.n	8001d68 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c6e:	6a3b      	ldr	r3, [r7, #32]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d007      	beq.n	8001c84 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c74:	6a3b      	ldr	r3, [r7, #32]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d111      	bne.n	8001c9e <HAL_RCC_OscConfig+0x66>
 8001c7a:	69fa      	ldr	r2, [r7, #28]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	025b      	lsls	r3, r3, #9
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d10c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c84:	4bbf      	ldr	r3, [pc, #764]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001c86:	681a      	ldr	r2, [r3, #0]
 8001c88:	2380      	movs	r3, #128	; 0x80
 8001c8a:	029b      	lsls	r3, r3, #10
 8001c8c:	4013      	ands	r3, r2
 8001c8e:	d100      	bne.n	8001c92 <HAL_RCC_OscConfig+0x5a>
 8001c90:	e069      	b.n	8001d66 <HAL_RCC_OscConfig+0x12e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d165      	bne.n	8001d66 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	e32e      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	025b      	lsls	r3, r3, #9
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_OscConfig+0x82>
 8001caa:	4bb6      	ldr	r3, [pc, #728]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	4bb5      	ldr	r3, [pc, #724]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001cb0:	2180      	movs	r1, #128	; 0x80
 8001cb2:	0249      	lsls	r1, r1, #9
 8001cb4:	430a      	orrs	r2, r1
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e027      	b.n	8001d0a <HAL_RCC_OscConfig+0xd2>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685a      	ldr	r2, [r3, #4]
 8001cbe:	23a0      	movs	r3, #160	; 0xa0
 8001cc0:	02db      	lsls	r3, r3, #11
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d10e      	bne.n	8001ce4 <HAL_RCC_OscConfig+0xac>
 8001cc6:	4baf      	ldr	r3, [pc, #700]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4bae      	ldr	r3, [pc, #696]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	02c9      	lsls	r1, r1, #11
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	4bab      	ldr	r3, [pc, #684]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	4baa      	ldr	r3, [pc, #680]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001cda:	2180      	movs	r1, #128	; 0x80
 8001cdc:	0249      	lsls	r1, r1, #9
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	e012      	b.n	8001d0a <HAL_RCC_OscConfig+0xd2>
 8001ce4:	4ba7      	ldr	r3, [pc, #668]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4ba6      	ldr	r3, [pc, #664]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001cea:	49a7      	ldr	r1, [pc, #668]	; (8001f88 <HAL_RCC_OscConfig+0x350>)
 8001cec:	400a      	ands	r2, r1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	4ba4      	ldr	r3, [pc, #656]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	025b      	lsls	r3, r3, #9
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	4ba1      	ldr	r3, [pc, #644]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4ba0      	ldr	r3, [pc, #640]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001d04:	49a1      	ldr	r1, [pc, #644]	; (8001f8c <HAL_RCC_OscConfig+0x354>)
 8001d06:	400a      	ands	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d014      	beq.n	8001d3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d12:	f7ff f98b 	bl	800102c <HAL_GetTick>
 8001d16:	0003      	movs	r3, r0
 8001d18:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f986 	bl	800102c <HAL_GetTick>
 8001d20:	0002      	movs	r2, r0
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e2e6      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d2e:	4b95      	ldr	r3, [pc, #596]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	2380      	movs	r3, #128	; 0x80
 8001d34:	029b      	lsls	r3, r3, #10
 8001d36:	4013      	ands	r3, r2
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xe4>
 8001d3a:	e015      	b.n	8001d68 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f976 	bl	800102c <HAL_GetTick>
 8001d40:	0003      	movs	r3, r0
 8001d42:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d46:	f7ff f971 	bl	800102c <HAL_GetTick>
 8001d4a:	0002      	movs	r2, r0
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b64      	cmp	r3, #100	; 0x64
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e2d1      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001d58:	4b8a      	ldr	r3, [pc, #552]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	4013      	ands	r3, r2
 8001d62:	d1f0      	bne.n	8001d46 <HAL_RCC_OscConfig+0x10e>
 8001d64:	e000      	b.n	8001d68 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d66:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2202      	movs	r2, #2
 8001d6e:	4013      	ands	r3, r2
 8001d70:	d100      	bne.n	8001d74 <HAL_RCC_OscConfig+0x13c>
 8001d72:	e08a      	b.n	8001e8a <HAL_RCC_OscConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d7a:	6a3b      	ldr	r3, [r7, #32]
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d005      	beq.n	8001d8c <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	2b0c      	cmp	r3, #12
 8001d84:	d13d      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ca>
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d13a      	bne.n	8001e02 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001d8c:	4b7d      	ldr	r3, [pc, #500]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2204      	movs	r2, #4
 8001d92:	4013      	ands	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_RCC_OscConfig+0x168>
 8001d96:	697b      	ldr	r3, [r7, #20]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d101      	bne.n	8001da0 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	e2ad      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da0:	4b78      	ldr	r3, [pc, #480]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	4a7a      	ldr	r2, [pc, #488]	; (8001f90 <HAL_RCC_OscConfig+0x358>)
 8001da6:	4013      	ands	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	021a      	lsls	r2, r3, #8
 8001db0:	4b74      	ldr	r3, [pc, #464]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001db2:	430a      	orrs	r2, r1
 8001db4:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001db6:	4b73      	ldr	r3, [pc, #460]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	2209      	movs	r2, #9
 8001dbc:	4393      	bics	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	4b70      	ldr	r3, [pc, #448]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001dc2:	697a      	ldr	r2, [r7, #20]
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001dc8:	f000 fbc8 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8001dcc:	0001      	movs	r1, r0
 8001dce:	4b6d      	ldr	r3, [pc, #436]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001dd0:	68db      	ldr	r3, [r3, #12]
 8001dd2:	091b      	lsrs	r3, r3, #4
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	4a6e      	ldr	r2, [pc, #440]	; (8001f94 <HAL_RCC_OscConfig+0x35c>)
 8001dda:	5cd3      	ldrb	r3, [r2, r3]
 8001ddc:	000a      	movs	r2, r1
 8001dde:	40da      	lsrs	r2, r3
 8001de0:	4b6d      	ldr	r3, [pc, #436]	; (8001f98 <HAL_RCC_OscConfig+0x360>)
 8001de2:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8001de4:	2513      	movs	r5, #19
 8001de6:	197c      	adds	r4, r7, r5
 8001de8:	2000      	movs	r0, #0
 8001dea:	f7ff f8e9 	bl	8000fc0 <HAL_InitTick>
 8001dee:	0003      	movs	r3, r0
 8001df0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001df2:	197b      	adds	r3, r7, r5
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d047      	beq.n	8001e8a <HAL_RCC_OscConfig+0x252>
      {
        return status;
 8001dfa:	2313      	movs	r3, #19
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	e27c      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d027      	beq.n	8001e58 <HAL_RCC_OscConfig+0x220>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001e08:	4b5e      	ldr	r3, [pc, #376]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2209      	movs	r2, #9
 8001e0e:	4393      	bics	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	4b5c      	ldr	r3, [pc, #368]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e1a:	f7ff f907 	bl	800102c <HAL_GetTick>
 8001e1e:	0003      	movs	r3, r0
 8001e20:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e22:	e008      	b.n	8001e36 <HAL_RCC_OscConfig+0x1fe>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e24:	f7ff f902 	bl	800102c <HAL_GetTick>
 8001e28:	0002      	movs	r2, r0
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	2b02      	cmp	r3, #2
 8001e30:	d901      	bls.n	8001e36 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001e32:	2303      	movs	r3, #3
 8001e34:	e262      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e36:	4b53      	ldr	r3, [pc, #332]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d0f1      	beq.n	8001e24 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e40:	4b50      	ldr	r3, [pc, #320]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	4a52      	ldr	r2, [pc, #328]	; (8001f90 <HAL_RCC_OscConfig+0x358>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	021a      	lsls	r2, r3, #8
 8001e50:	4b4c      	ldr	r3, [pc, #304]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e52:	430a      	orrs	r2, r1
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	e018      	b.n	8001e8a <HAL_RCC_OscConfig+0x252>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e58:	4b4a      	ldr	r3, [pc, #296]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e5a:	681a      	ldr	r2, [r3, #0]
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e5e:	2101      	movs	r1, #1
 8001e60:	438a      	bics	r2, r1
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e64:	f7ff f8e2 	bl	800102c <HAL_GetTick>
 8001e68:	0003      	movs	r3, r0
 8001e6a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e6c:	e008      	b.n	8001e80 <HAL_RCC_OscConfig+0x248>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e6e:	f7ff f8dd 	bl	800102c <HAL_GetTick>
 8001e72:	0002      	movs	r2, r0
 8001e74:	69bb      	ldr	r3, [r7, #24]
 8001e76:	1ad3      	subs	r3, r2, r3
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e23d      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e80:	4b40      	ldr	r3, [pc, #256]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	2204      	movs	r2, #4
 8001e86:	4013      	ands	r3, r2
 8001e88:	d1f1      	bne.n	8001e6e <HAL_RCC_OscConfig+0x236>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2210      	movs	r2, #16
 8001e90:	4013      	ands	r3, r2
 8001e92:	d100      	bne.n	8001e96 <HAL_RCC_OscConfig+0x25e>
 8001e94:	e09e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x39c>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 8001e96:	6a3b      	ldr	r3, [r7, #32]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d13f      	bne.n	8001f1c <HAL_RCC_OscConfig+0x2e4>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e9c:	4b39      	ldr	r3, [pc, #228]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	2380      	movs	r3, #128	; 0x80
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x27c>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x27c>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e223      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001eb4:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <HAL_RCC_OscConfig+0x364>)
 8001eba:	4013      	ands	r3, r2
 8001ebc:	0019      	movs	r1, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a1a      	ldr	r2, [r3, #32]
 8001ec2:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ec8:	4b2e      	ldr	r3, [pc, #184]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	021b      	lsls	r3, r3, #8
 8001ece:	0a19      	lsrs	r1, r3, #8
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	061a      	lsls	r2, r3, #24
 8001ed6:	4b2b      	ldr	r3, [pc, #172]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001ed8:	430a      	orrs	r2, r1
 8001eda:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	0b5b      	lsrs	r3, r3, #13
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	2280      	movs	r2, #128	; 0x80
 8001ee6:	0212      	lsls	r2, r2, #8
 8001ee8:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001eea:	4b26      	ldr	r3, [pc, #152]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	091b      	lsrs	r3, r3, #4
 8001ef0:	210f      	movs	r1, #15
 8001ef2:	400b      	ands	r3, r1
 8001ef4:	4927      	ldr	r1, [pc, #156]	; (8001f94 <HAL_RCC_OscConfig+0x35c>)
 8001ef6:	5ccb      	ldrb	r3, [r1, r3]
 8001ef8:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001efa:	4b27      	ldr	r3, [pc, #156]	; (8001f98 <HAL_RCC_OscConfig+0x360>)
 8001efc:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (TICK_INT_PRIORITY);
 8001efe:	2513      	movs	r5, #19
 8001f00:	197c      	adds	r4, r7, r5
 8001f02:	2000      	movs	r0, #0
 8001f04:	f7ff f85c 	bl	8000fc0 <HAL_InitTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001f0c:	197b      	adds	r3, r7, r5
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d05f      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x39c>
        {
          return status;
 8001f14:	2313      	movs	r3, #19
 8001f16:	18fb      	adds	r3, r7, r3
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	e1ef      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	699b      	ldr	r3, [r3, #24]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d03d      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x368>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001f2a:	2180      	movs	r1, #128	; 0x80
 8001f2c:	0049      	lsls	r1, r1, #1
 8001f2e:	430a      	orrs	r2, r1
 8001f30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f32:	f7ff f87b 	bl	800102c <HAL_GetTick>
 8001f36:	0003      	movs	r3, r0
 8001f38:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f3a:	e008      	b.n	8001f4e <HAL_RCC_OscConfig+0x316>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001f3c:	f7ff f876 	bl	800102c <HAL_GetTick>
 8001f40:	0002      	movs	r2, r0
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d901      	bls.n	8001f4e <HAL_RCC_OscConfig+0x316>
          {
            return HAL_TIMEOUT;
 8001f4a:	2303      	movs	r3, #3
 8001f4c:	e1d6      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001f4e:	4b0d      	ldr	r3, [pc, #52]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	2380      	movs	r3, #128	; 0x80
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	4013      	ands	r3, r2
 8001f58:	d0f0      	beq.n	8001f3c <HAL_RCC_OscConfig+0x304>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4a0f      	ldr	r2, [pc, #60]	; (8001f9c <HAL_RCC_OscConfig+0x364>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1a      	ldr	r2, [r3, #32]
 8001f68:	4b06      	ldr	r3, [pc, #24]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f6e:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	021b      	lsls	r3, r3, #8
 8001f74:	0a19      	lsrs	r1, r3, #8
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	061a      	lsls	r2, r3, #24
 8001f7c:	4b01      	ldr	r3, [pc, #4]	; (8001f84 <HAL_RCC_OscConfig+0x34c>)
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	605a      	str	r2, [r3, #4]
 8001f82:	e027      	b.n	8001fd4 <HAL_RCC_OscConfig+0x39c>
 8001f84:	40021000 	.word	0x40021000
 8001f88:	fffeffff 	.word	0xfffeffff
 8001f8c:	fffbffff 	.word	0xfffbffff
 8001f90:	ffffe0ff 	.word	0xffffe0ff
 8001f94:	08003d58 	.word	0x08003d58
 8001f98:	20000000 	.word	0x20000000
 8001f9c:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001fa0:	4bbf      	ldr	r3, [pc, #764]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4bbe      	ldr	r3, [pc, #760]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8001fa6:	49bf      	ldr	r1, [pc, #764]	; (80022a4 <HAL_RCC_OscConfig+0x66c>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7ff f83e 	bl	800102c <HAL_GetTick>
 8001fb0:	0003      	movs	r3, r0
 8001fb2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fb4:	e008      	b.n	8001fc8 <HAL_RCC_OscConfig+0x390>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001fb6:	f7ff f839 	bl	800102c <HAL_GetTick>
 8001fba:	0002      	movs	r2, r0
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x390>
          {
            return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e199      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001fc8:	4bb5      	ldr	r3, [pc, #724]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d1f0      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x37e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2208      	movs	r2, #8
 8001fda:	4013      	ands	r3, r2
 8001fdc:	d036      	beq.n	800204c <HAL_RCC_OscConfig+0x414>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d019      	beq.n	800201a <HAL_RCC_OscConfig+0x3e2>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fe6:	4bae      	ldr	r3, [pc, #696]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8001fe8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fea:	4bad      	ldr	r3, [pc, #692]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8001fec:	2101      	movs	r1, #1
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ff2:	f7ff f81b 	bl	800102c <HAL_GetTick>
 8001ff6:	0003      	movs	r3, r0
 8001ff8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ffa:	e008      	b.n	800200e <HAL_RCC_OscConfig+0x3d6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ffc:	f7ff f816 	bl	800102c <HAL_GetTick>
 8002000:	0002      	movs	r2, r0
 8002002:	69bb      	ldr	r3, [r7, #24]
 8002004:	1ad3      	subs	r3, r2, r3
 8002006:	2b02      	cmp	r3, #2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x3d6>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e176      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800200e:	4ba4      	ldr	r3, [pc, #656]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002012:	2202      	movs	r2, #2
 8002014:	4013      	ands	r3, r2
 8002016:	d0f1      	beq.n	8001ffc <HAL_RCC_OscConfig+0x3c4>
 8002018:	e018      	b.n	800204c <HAL_RCC_OscConfig+0x414>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800201a:	4ba1      	ldr	r3, [pc, #644]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800201c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800201e:	4ba0      	ldr	r3, [pc, #640]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002020:	2101      	movs	r1, #1
 8002022:	438a      	bics	r2, r1
 8002024:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002026:	f7ff f801 	bl	800102c <HAL_GetTick>
 800202a:	0003      	movs	r3, r0
 800202c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x40a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002030:	f7fe fffc 	bl	800102c <HAL_GetTick>
 8002034:	0002      	movs	r2, r0
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x40a>
        {
          return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e15c      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002042:	4b97      	ldr	r3, [pc, #604]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002046:	2202      	movs	r2, #2
 8002048:	4013      	ands	r3, r2
 800204a:	d1f1      	bne.n	8002030 <HAL_RCC_OscConfig+0x3f8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2204      	movs	r2, #4
 8002052:	4013      	ands	r3, r2
 8002054:	d100      	bne.n	8002058 <HAL_RCC_OscConfig+0x420>
 8002056:	e0af      	b.n	80021b8 <HAL_RCC_OscConfig+0x580>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002058:	2327      	movs	r3, #39	; 0x27
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002060:	4b8f      	ldr	r3, [pc, #572]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002064:	2380      	movs	r3, #128	; 0x80
 8002066:	055b      	lsls	r3, r3, #21
 8002068:	4013      	ands	r3, r2
 800206a:	d10a      	bne.n	8002082 <HAL_RCC_OscConfig+0x44a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800206c:	4b8c      	ldr	r3, [pc, #560]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800206e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002070:	4b8b      	ldr	r3, [pc, #556]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002072:	2180      	movs	r1, #128	; 0x80
 8002074:	0549      	lsls	r1, r1, #21
 8002076:	430a      	orrs	r2, r1
 8002078:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 800207a:	2327      	movs	r3, #39	; 0x27
 800207c:	18fb      	adds	r3, r7, r3
 800207e:	2201      	movs	r2, #1
 8002080:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002082:	4b89      	ldr	r3, [pc, #548]	; (80022a8 <HAL_RCC_OscConfig+0x670>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4013      	ands	r3, r2
 800208c:	d11a      	bne.n	80020c4 <HAL_RCC_OscConfig+0x48c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800208e:	4b86      	ldr	r3, [pc, #536]	; (80022a8 <HAL_RCC_OscConfig+0x670>)
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	4b85      	ldr	r3, [pc, #532]	; (80022a8 <HAL_RCC_OscConfig+0x670>)
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	0049      	lsls	r1, r1, #1
 8002098:	430a      	orrs	r2, r1
 800209a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209c:	f7fe ffc6 	bl	800102c <HAL_GetTick>
 80020a0:	0003      	movs	r3, r0
 80020a2:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x480>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a6:	f7fe ffc1 	bl	800102c <HAL_GetTick>
 80020aa:	0002      	movs	r2, r0
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b64      	cmp	r3, #100	; 0x64
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x480>
        {
          return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e121      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020b8:	4b7b      	ldr	r3, [pc, #492]	; (80022a8 <HAL_RCC_OscConfig+0x670>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4013      	ands	r3, r2
 80020c2:	d0f0      	beq.n	80020a6 <HAL_RCC_OscConfig+0x46e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	689a      	ldr	r2, [r3, #8]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d107      	bne.n	80020e0 <HAL_RCC_OscConfig+0x4a8>
 80020d0:	4b73      	ldr	r3, [pc, #460]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80020d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020d4:	4b72      	ldr	r3, [pc, #456]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80020d6:	2180      	movs	r1, #128	; 0x80
 80020d8:	0049      	lsls	r1, r1, #1
 80020da:	430a      	orrs	r2, r1
 80020dc:	651a      	str	r2, [r3, #80]	; 0x50
 80020de:	e031      	b.n	8002144 <HAL_RCC_OscConfig+0x50c>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	689b      	ldr	r3, [r3, #8]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d10c      	bne.n	8002102 <HAL_RCC_OscConfig+0x4ca>
 80020e8:	4b6d      	ldr	r3, [pc, #436]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80020ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020ec:	4b6c      	ldr	r3, [pc, #432]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80020ee:	496d      	ldr	r1, [pc, #436]	; (80022a4 <HAL_RCC_OscConfig+0x66c>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	651a      	str	r2, [r3, #80]	; 0x50
 80020f4:	4b6a      	ldr	r3, [pc, #424]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80020f6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80020f8:	4b69      	ldr	r3, [pc, #420]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80020fa:	496c      	ldr	r1, [pc, #432]	; (80022ac <HAL_RCC_OscConfig+0x674>)
 80020fc:	400a      	ands	r2, r1
 80020fe:	651a      	str	r2, [r3, #80]	; 0x50
 8002100:	e020      	b.n	8002144 <HAL_RCC_OscConfig+0x50c>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	23a0      	movs	r3, #160	; 0xa0
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	429a      	cmp	r2, r3
 800210c:	d10e      	bne.n	800212c <HAL_RCC_OscConfig+0x4f4>
 800210e:	4b64      	ldr	r3, [pc, #400]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002112:	4b63      	ldr	r3, [pc, #396]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002114:	2180      	movs	r1, #128	; 0x80
 8002116:	00c9      	lsls	r1, r1, #3
 8002118:	430a      	orrs	r2, r1
 800211a:	651a      	str	r2, [r3, #80]	; 0x50
 800211c:	4b60      	ldr	r3, [pc, #384]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800211e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002120:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002122:	2180      	movs	r1, #128	; 0x80
 8002124:	0049      	lsls	r1, r1, #1
 8002126:	430a      	orrs	r2, r1
 8002128:	651a      	str	r2, [r3, #80]	; 0x50
 800212a:	e00b      	b.n	8002144 <HAL_RCC_OscConfig+0x50c>
 800212c:	4b5c      	ldr	r3, [pc, #368]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800212e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002130:	4b5b      	ldr	r3, [pc, #364]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002132:	495c      	ldr	r1, [pc, #368]	; (80022a4 <HAL_RCC_OscConfig+0x66c>)
 8002134:	400a      	ands	r2, r1
 8002136:	651a      	str	r2, [r3, #80]	; 0x50
 8002138:	4b59      	ldr	r3, [pc, #356]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800213a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800213c:	4b58      	ldr	r3, [pc, #352]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800213e:	495b      	ldr	r1, [pc, #364]	; (80022ac <HAL_RCC_OscConfig+0x674>)
 8002140:	400a      	ands	r2, r1
 8002142:	651a      	str	r2, [r3, #80]	; 0x50
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d015      	beq.n	8002178 <HAL_RCC_OscConfig+0x540>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800214c:	f7fe ff6e 	bl	800102c <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002154:	e009      	b.n	800216a <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002156:	f7fe ff69 	bl	800102c <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	4a53      	ldr	r2, [pc, #332]	; (80022b0 <HAL_RCC_OscConfig+0x678>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e0c8      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800216a:	4b4d      	ldr	r3, [pc, #308]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800216c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800216e:	2380      	movs	r3, #128	; 0x80
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4013      	ands	r3, r2
 8002174:	d0ef      	beq.n	8002156 <HAL_RCC_OscConfig+0x51e>
 8002176:	e014      	b.n	80021a2 <HAL_RCC_OscConfig+0x56a>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002178:	f7fe ff58 	bl	800102c <HAL_GetTick>
 800217c:	0003      	movs	r3, r0
 800217e:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002180:	e009      	b.n	8002196 <HAL_RCC_OscConfig+0x55e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002182:	f7fe ff53 	bl	800102c <HAL_GetTick>
 8002186:	0002      	movs	r2, r0
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	4a48      	ldr	r2, [pc, #288]	; (80022b0 <HAL_RCC_OscConfig+0x678>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x55e>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e0b2      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002196:	4b42      	ldr	r3, [pc, #264]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002198:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4013      	ands	r3, r2
 80021a0:	d1ef      	bne.n	8002182 <HAL_RCC_OscConfig+0x54a>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80021a2:	2327      	movs	r3, #39	; 0x27
 80021a4:	18fb      	adds	r3, r7, r3
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d105      	bne.n	80021b8 <HAL_RCC_OscConfig+0x580>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021ac:	4b3c      	ldr	r3, [pc, #240]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80021ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b0:	4b3b      	ldr	r3, [pc, #236]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80021b2:	4940      	ldr	r1, [pc, #256]	; (80022b4 <HAL_RCC_OscConfig+0x67c>)
 80021b4:	400a      	ands	r2, r1
 80021b6:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d100      	bne.n	80021c2 <HAL_RCC_OscConfig+0x58a>
 80021c0:	e09b      	b.n	80022fa <HAL_RCC_OscConfig+0x6c2>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	2b0c      	cmp	r3, #12
 80021c6:	d064      	beq.n	8002292 <HAL_RCC_OscConfig+0x65a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d145      	bne.n	800225c <HAL_RCC_OscConfig+0x624>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d0:	4b33      	ldr	r3, [pc, #204]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80021d6:	4938      	ldr	r1, [pc, #224]	; (80022b8 <HAL_RCC_OscConfig+0x680>)
 80021d8:	400a      	ands	r2, r1
 80021da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021dc:	f7fe ff26 	bl	800102c <HAL_GetTick>
 80021e0:	0003      	movs	r3, r0
 80021e2:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021e4:	e008      	b.n	80021f8 <HAL_RCC_OscConfig+0x5c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021e6:	f7fe ff21 	bl	800102c <HAL_GetTick>
 80021ea:	0002      	movs	r2, r0
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d901      	bls.n	80021f8 <HAL_RCC_OscConfig+0x5c0>
          {
            return HAL_TIMEOUT;
 80021f4:	2303      	movs	r3, #3
 80021f6:	e081      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021f8:	4b29      	ldr	r3, [pc, #164]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 80021fa:	681a      	ldr	r2, [r3, #0]
 80021fc:	2380      	movs	r3, #128	; 0x80
 80021fe:	049b      	lsls	r3, r3, #18
 8002200:	4013      	ands	r3, r2
 8002202:	d1f0      	bne.n	80021e6 <HAL_RCC_OscConfig+0x5ae>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002204:	4b26      	ldr	r3, [pc, #152]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	4a2c      	ldr	r2, [pc, #176]	; (80022bc <HAL_RCC_OscConfig+0x684>)
 800220a:	4013      	ands	r3, r2
 800220c:	0019      	movs	r1, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002216:	431a      	orrs	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800221c:	431a      	orrs	r2, r3
 800221e:	4b20      	ldr	r3, [pc, #128]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002220:	430a      	orrs	r2, r1
 8002222:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002224:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	4b1d      	ldr	r3, [pc, #116]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800222a:	2180      	movs	r1, #128	; 0x80
 800222c:	0449      	lsls	r1, r1, #17
 800222e:	430a      	orrs	r2, r1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7fe fefb 	bl	800102c <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800223a:	e008      	b.n	800224e <HAL_RCC_OscConfig+0x616>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800223c:	f7fe fef6 	bl	800102c <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	2b02      	cmp	r3, #2
 8002248:	d901      	bls.n	800224e <HAL_RCC_OscConfig+0x616>
          {
            return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e056      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800224e:	4b14      	ldr	r3, [pc, #80]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	2380      	movs	r3, #128	; 0x80
 8002254:	049b      	lsls	r3, r3, #18
 8002256:	4013      	ands	r3, r2
 8002258:	d0f0      	beq.n	800223c <HAL_RCC_OscConfig+0x604>
 800225a:	e04e      	b.n	80022fa <HAL_RCC_OscConfig+0x6c2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	4b0f      	ldr	r3, [pc, #60]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002262:	4915      	ldr	r1, [pc, #84]	; (80022b8 <HAL_RCC_OscConfig+0x680>)
 8002264:	400a      	ands	r2, r1
 8002266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002268:	f7fe fee0 	bl	800102c <HAL_GetTick>
 800226c:	0003      	movs	r3, r0
 800226e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002272:	f7fe fedb 	bl	800102c <HAL_GetTick>
 8002276:	0002      	movs	r2, r0
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e03b      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002284:	4b06      	ldr	r3, [pc, #24]	; (80022a0 <HAL_RCC_OscConfig+0x668>)
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	2380      	movs	r3, #128	; 0x80
 800228a:	049b      	lsls	r3, r3, #18
 800228c:	4013      	ands	r3, r2
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x63a>
 8002290:	e033      	b.n	80022fa <HAL_RCC_OscConfig+0x6c2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002296:	2b01      	cmp	r3, #1
 8002298:	d112      	bne.n	80022c0 <HAL_RCC_OscConfig+0x688>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e02e      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	40021000 	.word	0x40021000
 80022a4:	fffffeff 	.word	0xfffffeff
 80022a8:	40007000 	.word	0x40007000
 80022ac:	fffffbff 	.word	0xfffffbff
 80022b0:	00001388 	.word	0x00001388
 80022b4:	efffffff 	.word	0xefffffff
 80022b8:	feffffff 	.word	0xfeffffff
 80022bc:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80022c0:	4b10      	ldr	r3, [pc, #64]	; (8002304 <HAL_RCC_OscConfig+0x6cc>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022c6:	69fa      	ldr	r2, [r7, #28]
 80022c8:	2380      	movs	r3, #128	; 0x80
 80022ca:	025b      	lsls	r3, r3, #9
 80022cc:	401a      	ands	r2, r3
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d10f      	bne.n	80022f6 <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	23f0      	movs	r3, #240	; 0xf0
 80022da:	039b      	lsls	r3, r3, #14
 80022dc:	401a      	ands	r2, r3
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d107      	bne.n	80022f6 <HAL_RCC_OscConfig+0x6be>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80022e6:	69fa      	ldr	r2, [r7, #28]
 80022e8:	23c0      	movs	r3, #192	; 0xc0
 80022ea:	041b      	lsls	r3, r3, #16
 80022ec:	401a      	ands	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d001      	beq.n	80022fa <HAL_RCC_OscConfig+0x6c2>
        {
          return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_RCC_OscConfig+0x6c4>
        }
      }
    }
  }

  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	0018      	movs	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	b00a      	add	sp, #40	; 0x28
 8002302:	bdb0      	pop	{r4, r5, r7, pc}
 8002304:	40021000 	.word	0x40021000

08002308 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d101      	bne.n	800231c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e10d      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800231c:	4b88      	ldr	r3, [pc, #544]	; (8002540 <HAL_RCC_ClockConfig+0x238>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2201      	movs	r2, #1
 8002322:	4013      	ands	r3, r2
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	429a      	cmp	r2, r3
 8002328:	d911      	bls.n	800234e <HAL_RCC_ClockConfig+0x46>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232a:	4b85      	ldr	r3, [pc, #532]	; (8002540 <HAL_RCC_ClockConfig+0x238>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2201      	movs	r2, #1
 8002330:	4393      	bics	r3, r2
 8002332:	0019      	movs	r1, r3
 8002334:	4b82      	ldr	r3, [pc, #520]	; (8002540 <HAL_RCC_ClockConfig+0x238>)
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	430a      	orrs	r2, r1
 800233a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800233c:	4b80      	ldr	r3, [pc, #512]	; (8002540 <HAL_RCC_ClockConfig+0x238>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2201      	movs	r2, #1
 8002342:	4013      	ands	r3, r2
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	429a      	cmp	r2, r3
 8002348:	d001      	beq.n	800234e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e0f4      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d009      	beq.n	800236c <HAL_RCC_ClockConfig+0x64>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002358:	4b7a      	ldr	r3, [pc, #488]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	22f0      	movs	r2, #240	; 0xf0
 800235e:	4393      	bics	r3, r2
 8002360:	0019      	movs	r1, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	689a      	ldr	r2, [r3, #8]
 8002366:	4b77      	ldr	r3, [pc, #476]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 8002368:	430a      	orrs	r2, r1
 800236a:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2201      	movs	r2, #1
 8002372:	4013      	ands	r3, r2
 8002374:	d100      	bne.n	8002378 <HAL_RCC_ClockConfig+0x70>
 8002376:	e089      	b.n	800248c <HAL_RCC_ClockConfig+0x184>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d107      	bne.n	8002390 <HAL_RCC_ClockConfig+0x88>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002380:	4b70      	ldr	r3, [pc, #448]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	2380      	movs	r3, #128	; 0x80
 8002386:	029b      	lsls	r3, r3, #10
 8002388:	4013      	ands	r3, r2
 800238a:	d120      	bne.n	80023ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0d3      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b03      	cmp	r3, #3
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xa0>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002398:	4b6a      	ldr	r3, [pc, #424]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	049b      	lsls	r3, r3, #18
 80023a0:	4013      	ands	r3, r2
 80023a2:	d114      	bne.n	80023ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0c7      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b01      	cmp	r3, #1
 80023ae:	d106      	bne.n	80023be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b0:	4b64      	ldr	r3, [pc, #400]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2204      	movs	r2, #4
 80023b6:	4013      	ands	r3, r2
 80023b8:	d109      	bne.n	80023ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e0bc      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80023be:	4b61      	ldr	r3, [pc, #388]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	2380      	movs	r3, #128	; 0x80
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4013      	ands	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_RCC_ClockConfig+0xc6>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e0b4      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023ce:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 80023d0:	68db      	ldr	r3, [r3, #12]
 80023d2:	2203      	movs	r2, #3
 80023d4:	4393      	bics	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 80023de:	430a      	orrs	r2, r1
 80023e0:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023e2:	f7fe fe23 	bl	800102c <HAL_GetTick>
 80023e6:	0003      	movs	r3, r0
 80023e8:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d111      	bne.n	8002416 <HAL_RCC_ClockConfig+0x10e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f2:	e009      	b.n	8002408 <HAL_RCC_ClockConfig+0x100>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f4:	f7fe fe1a 	bl	800102c <HAL_GetTick>
 80023f8:	0002      	movs	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x240>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_ClockConfig+0x100>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e097      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002408:	4b4e      	ldr	r3, [pc, #312]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	220c      	movs	r2, #12
 800240e:	4013      	ands	r3, r2
 8002410:	2b08      	cmp	r3, #8
 8002412:	d1ef      	bne.n	80023f4 <HAL_RCC_ClockConfig+0xec>
 8002414:	e03a      	b.n	800248c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2b03      	cmp	r3, #3
 800241c:	d111      	bne.n	8002442 <HAL_RCC_ClockConfig+0x13a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800241e:	e009      	b.n	8002434 <HAL_RCC_ClockConfig+0x12c>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002420:	f7fe fe04 	bl	800102c <HAL_GetTick>
 8002424:	0002      	movs	r2, r0
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	4a47      	ldr	r2, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x240>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_ClockConfig+0x12c>
        {
          return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e081      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002434:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	220c      	movs	r2, #12
 800243a:	4013      	ands	r3, r2
 800243c:	2b0c      	cmp	r3, #12
 800243e:	d1ef      	bne.n	8002420 <HAL_RCC_ClockConfig+0x118>
 8002440:	e024      	b.n	800248c <HAL_RCC_ClockConfig+0x184>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d11b      	bne.n	8002482 <HAL_RCC_ClockConfig+0x17a>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800244a:	e009      	b.n	8002460 <HAL_RCC_ClockConfig+0x158>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800244c:	f7fe fdee 	bl	800102c <HAL_GetTick>
 8002450:	0002      	movs	r2, r0
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	4a3c      	ldr	r2, [pc, #240]	; (8002548 <HAL_RCC_ClockConfig+0x240>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_ClockConfig+0x158>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e06b      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002460:	4b38      	ldr	r3, [pc, #224]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	220c      	movs	r2, #12
 8002466:	4013      	ands	r3, r2
 8002468:	2b04      	cmp	r3, #4
 800246a:	d1ef      	bne.n	800244c <HAL_RCC_ClockConfig+0x144>
 800246c:	e00e      	b.n	800248c <HAL_RCC_ClockConfig+0x184>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800246e:	f7fe fddd 	bl	800102c <HAL_GetTick>
 8002472:	0002      	movs	r2, r0
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	4a33      	ldr	r2, [pc, #204]	; (8002548 <HAL_RCC_ClockConfig+0x240>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_ClockConfig+0x17a>
        {
          return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e05a      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002482:	4b30      	ldr	r3, [pc, #192]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	220c      	movs	r2, #12
 8002488:	4013      	ands	r3, r2
 800248a:	d1f0      	bne.n	800246e <HAL_RCC_ClockConfig+0x166>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800248c:	4b2c      	ldr	r3, [pc, #176]	; (8002540 <HAL_RCC_ClockConfig+0x238>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	2201      	movs	r2, #1
 8002492:	4013      	ands	r3, r2
 8002494:	683a      	ldr	r2, [r7, #0]
 8002496:	429a      	cmp	r2, r3
 8002498:	d211      	bcs.n	80024be <HAL_RCC_ClockConfig+0x1b6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249a:	4b29      	ldr	r3, [pc, #164]	; (8002540 <HAL_RCC_ClockConfig+0x238>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2201      	movs	r2, #1
 80024a0:	4393      	bics	r3, r2
 80024a2:	0019      	movs	r1, r3
 80024a4:	4b26      	ldr	r3, [pc, #152]	; (8002540 <HAL_RCC_ClockConfig+0x238>)
 80024a6:	683a      	ldr	r2, [r7, #0]
 80024a8:	430a      	orrs	r2, r1
 80024aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024ac:	4b24      	ldr	r3, [pc, #144]	; (8002540 <HAL_RCC_ClockConfig+0x238>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2201      	movs	r2, #1
 80024b2:	4013      	ands	r3, r2
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d001      	beq.n	80024be <HAL_RCC_ClockConfig+0x1b6>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e03c      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2204      	movs	r2, #4
 80024c4:	4013      	ands	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c8:	4b1e      	ldr	r3, [pc, #120]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 80024ca:	68db      	ldr	r3, [r3, #12]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	; (800254c <HAL_RCC_ClockConfig+0x244>)
 80024ce:	4013      	ands	r3, r2
 80024d0:	0019      	movs	r1, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	68da      	ldr	r2, [r3, #12]
 80024d6:	4b1b      	ldr	r3, [pc, #108]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	2208      	movs	r2, #8
 80024e2:	4013      	ands	r3, r2
 80024e4:	d00a      	beq.n	80024fc <HAL_RCC_ClockConfig+0x1f4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024e6:	4b17      	ldr	r3, [pc, #92]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	4a19      	ldr	r2, [pc, #100]	; (8002550 <HAL_RCC_ClockConfig+0x248>)
 80024ec:	4013      	ands	r3, r2
 80024ee:	0019      	movs	r1, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	00da      	lsls	r2, r3, #3
 80024f6:	4b13      	ldr	r3, [pc, #76]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 80024f8:	430a      	orrs	r2, r1
 80024fa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024fc:	f000 f82e 	bl	800255c <HAL_RCC_GetSysClockFreq>
 8002500:	0001      	movs	r1, r0
 8002502:	4b10      	ldr	r3, [pc, #64]	; (8002544 <HAL_RCC_ClockConfig+0x23c>)
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	091b      	lsrs	r3, r3, #4
 8002508:	220f      	movs	r2, #15
 800250a:	4013      	ands	r3, r2
 800250c:	4a11      	ldr	r2, [pc, #68]	; (8002554 <HAL_RCC_ClockConfig+0x24c>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	000a      	movs	r2, r1
 8002512:	40da      	lsrs	r2, r3
 8002514:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_RCC_ClockConfig+0x250>)
 8002516:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8002518:	250b      	movs	r5, #11
 800251a:	197c      	adds	r4, r7, r5
 800251c:	2000      	movs	r0, #0
 800251e:	f7fe fd4f 	bl	8000fc0 <HAL_InitTick>
 8002522:	0003      	movs	r3, r0
 8002524:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8002526:	197b      	adds	r3, r7, r5
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d003      	beq.n	8002536 <HAL_RCC_ClockConfig+0x22e>
  {
    return status;
 800252e:	230b      	movs	r3, #11
 8002530:	18fb      	adds	r3, r7, r3
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	e000      	b.n	8002538 <HAL_RCC_ClockConfig+0x230>
  }

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	0018      	movs	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	b004      	add	sp, #16
 800253e:	bdb0      	pop	{r4, r5, r7, pc}
 8002540:	40022000 	.word	0x40022000
 8002544:	40021000 	.word	0x40021000
 8002548:	00001388 	.word	0x00001388
 800254c:	fffff8ff 	.word	0xfffff8ff
 8002550:	ffffc7ff 	.word	0xffffc7ff
 8002554:	08003d58 	.word	0x08003d58
 8002558:	20000000 	.word	0x20000000

0800255c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8002562:	4b3b      	ldr	r3, [pc, #236]	; (8002650 <HAL_RCC_GetSysClockFreq+0xf4>)
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	220c      	movs	r2, #12
 800256c:	4013      	ands	r3, r2
 800256e:	2b08      	cmp	r3, #8
 8002570:	d00e      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0x34>
 8002572:	2b0c      	cmp	r3, #12
 8002574:	d00f      	beq.n	8002596 <HAL_RCC_GetSysClockFreq+0x3a>
 8002576:	2b04      	cmp	r3, #4
 8002578:	d157      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0xce>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800257a:	4b35      	ldr	r3, [pc, #212]	; (8002650 <HAL_RCC_GetSysClockFreq+0xf4>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	2210      	movs	r2, #16
 8002580:	4013      	ands	r3, r2
 8002582:	d002      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0x2e>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002584:	4b33      	ldr	r3, [pc, #204]	; (8002654 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002586:	613b      	str	r3, [r7, #16]
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002588:	e05d      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xea>
        sysclockfreq =  HSI_VALUE;
 800258a:	4b33      	ldr	r3, [pc, #204]	; (8002658 <HAL_RCC_GetSysClockFreq+0xfc>)
 800258c:	613b      	str	r3, [r7, #16]
      break;
 800258e:	e05a      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002590:	4b32      	ldr	r3, [pc, #200]	; (800265c <HAL_RCC_GetSysClockFreq+0x100>)
 8002592:	613b      	str	r3, [r7, #16]
      break;
 8002594:	e057      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	0c9b      	lsrs	r3, r3, #18
 800259a:	220f      	movs	r2, #15
 800259c:	4013      	ands	r3, r2
 800259e:	4a30      	ldr	r2, [pc, #192]	; (8002660 <HAL_RCC_GetSysClockFreq+0x104>)
 80025a0:	5cd3      	ldrb	r3, [r2, r3]
 80025a2:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	0d9b      	lsrs	r3, r3, #22
 80025a8:	2203      	movs	r2, #3
 80025aa:	4013      	ands	r3, r2
 80025ac:	3301      	adds	r3, #1
 80025ae:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025b0:	4b27      	ldr	r3, [pc, #156]	; (8002650 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025b2:	68da      	ldr	r2, [r3, #12]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	025b      	lsls	r3, r3, #9
 80025b8:	4013      	ands	r3, r2
 80025ba:	d00f      	beq.n	80025dc <HAL_RCC_GetSysClockFreq+0x80>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE * pllm) / plld;
 80025bc:	68b9      	ldr	r1, [r7, #8]
 80025be:	000a      	movs	r2, r1
 80025c0:	0152      	lsls	r2, r2, #5
 80025c2:	1a52      	subs	r2, r2, r1
 80025c4:	0193      	lsls	r3, r2, #6
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	185b      	adds	r3, r3, r1
 80025cc:	025b      	lsls	r3, r3, #9
 80025ce:	6879      	ldr	r1, [r7, #4]
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7fd fd99 	bl	8000108 <__udivsi3>
 80025d6:	0003      	movs	r3, r0
 80025d8:	617b      	str	r3, [r7, #20]
 80025da:	e023      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xc8>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80025dc:	4b1c      	ldr	r3, [pc, #112]	; (8002650 <HAL_RCC_GetSysClockFreq+0xf4>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2210      	movs	r2, #16
 80025e2:	4013      	ands	r3, r2
 80025e4:	d00f      	beq.n	8002606 <HAL_RCC_GetSysClockFreq+0xaa>
        {
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 80025e6:	68b9      	ldr	r1, [r7, #8]
 80025e8:	000a      	movs	r2, r1
 80025ea:	0152      	lsls	r2, r2, #5
 80025ec:	1a52      	subs	r2, r2, r1
 80025ee:	0193      	lsls	r3, r2, #6
 80025f0:	1a9b      	subs	r3, r3, r2
 80025f2:	00db      	lsls	r3, r3, #3
 80025f4:	185b      	adds	r3, r3, r1
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7fd fd84 	bl	8000108 <__udivsi3>
 8002600:	0003      	movs	r3, r0
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	e00e      	b.n	8002624 <HAL_RCC_GetSysClockFreq+0xc8>
        }
        else
        {
         pllvco = (HSI_VALUE * pllm) / plld;
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	000a      	movs	r2, r1
 800260a:	0152      	lsls	r2, r2, #5
 800260c:	1a52      	subs	r2, r2, r1
 800260e:	0193      	lsls	r3, r2, #6
 8002610:	1a9b      	subs	r3, r3, r2
 8002612:	00db      	lsls	r3, r3, #3
 8002614:	185b      	adds	r3, r3, r1
 8002616:	029b      	lsls	r3, r3, #10
 8002618:	6879      	ldr	r1, [r7, #4]
 800261a:	0018      	movs	r0, r3
 800261c:	f7fd fd74 	bl	8000108 <__udivsi3>
 8002620:	0003      	movs	r3, r0
 8002622:	617b      	str	r3, [r7, #20]
        }
      }
      sysclockfreq = pllvco;
 8002624:	697b      	ldr	r3, [r7, #20]
 8002626:	613b      	str	r3, [r7, #16]
      break;
 8002628:	e00d      	b.n	8002646 <HAL_RCC_GetSysClockFreq+0xea>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800262a:	4b09      	ldr	r3, [pc, #36]	; (8002650 <HAL_RCC_GetSysClockFreq+0xf4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	0b5b      	lsrs	r3, r3, #13
 8002630:	2207      	movs	r2, #7
 8002632:	4013      	ands	r3, r2
 8002634:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	3301      	adds	r3, #1
 800263a:	2280      	movs	r2, #128	; 0x80
 800263c:	0212      	lsls	r2, r2, #8
 800263e:	409a      	lsls	r2, r3
 8002640:	0013      	movs	r3, r2
 8002642:	613b      	str	r3, [r7, #16]
      break;
 8002644:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002646:	693b      	ldr	r3, [r7, #16]
}
 8002648:	0018      	movs	r0, r3
 800264a:	46bd      	mov	sp, r7
 800264c:	b006      	add	sp, #24
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40021000 	.word	0x40021000
 8002654:	003d0900 	.word	0x003d0900
 8002658:	00f42400 	.word	0x00f42400
 800265c:	007a1200 	.word	0x007a1200
 8002660:	08003d70 	.word	0x08003d70

08002664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002668:	4b02      	ldr	r3, [pc, #8]	; (8002674 <HAL_RCC_GetHCLKFreq+0x10>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	0018      	movs	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	20000000 	.word	0x20000000

08002678 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800267c:	f7ff fff2 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 8002680:	0001      	movs	r1, r0
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002684:	68db      	ldr	r3, [r3, #12]
 8002686:	0a1b      	lsrs	r3, r3, #8
 8002688:	2207      	movs	r2, #7
 800268a:	4013      	ands	r3, r2
 800268c:	4a04      	ldr	r2, [pc, #16]	; (80026a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800268e:	5cd3      	ldrb	r3, [r2, r3]
 8002690:	40d9      	lsrs	r1, r3
 8002692:	000b      	movs	r3, r1
}
 8002694:	0018      	movs	r0, r3
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	08003d68 	.word	0x08003d68

080026a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026a8:	f7ff ffdc 	bl	8002664 <HAL_RCC_GetHCLKFreq>
 80026ac:	0001      	movs	r1, r0
 80026ae:	4b06      	ldr	r3, [pc, #24]	; (80026c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	0adb      	lsrs	r3, r3, #11
 80026b4:	2207      	movs	r2, #7
 80026b6:	4013      	ands	r3, r2
 80026b8:	4a04      	ldr	r2, [pc, #16]	; (80026cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80026ba:	5cd3      	ldrb	r3, [r2, r3]
 80026bc:	40d9      	lsrs	r1, r3
 80026be:	000b      	movs	r3, r1
}
 80026c0:	0018      	movs	r0, r3
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	46c0      	nop			; (mov r8, r8)
 80026c8:	40021000 	.word	0x40021000
 80026cc:	08003d68 	.word	0x08003d68

080026d0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2220      	movs	r2, #32
 80026de:	4013      	ands	r3, r2
 80026e0:	d100      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x14>
 80026e2:	e0c7      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 80026e4:	2317      	movs	r3, #23
 80026e6:	18fb      	adds	r3, r7, r3
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026ec:	4b89      	ldr	r3, [pc, #548]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80026ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026f0:	2380      	movs	r3, #128	; 0x80
 80026f2:	055b      	lsls	r3, r3, #21
 80026f4:	4013      	ands	r3, r2
 80026f6:	d10a      	bne.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x3e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026f8:	4b86      	ldr	r3, [pc, #536]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80026fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026fc:	4b85      	ldr	r3, [pc, #532]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80026fe:	2180      	movs	r1, #128	; 0x80
 8002700:	0549      	lsls	r1, r1, #21
 8002702:	430a      	orrs	r2, r1
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002706:	2317      	movs	r3, #23
 8002708:	18fb      	adds	r3, r7, r3
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270e:	4b82      	ldr	r3, [pc, #520]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	005b      	lsls	r3, r3, #1
 8002716:	4013      	ands	r3, r2
 8002718:	d11a      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x80>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800271a:	4b7f      	ldr	r3, [pc, #508]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	4b7e      	ldr	r3, [pc, #504]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002720:	2180      	movs	r1, #128	; 0x80
 8002722:	0049      	lsls	r1, r1, #1
 8002724:	430a      	orrs	r2, r1
 8002726:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002728:	f7fe fc80 	bl	800102c <HAL_GetTick>
 800272c:	0003      	movs	r3, r0
 800272e:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	e008      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x74>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002732:	f7fe fc7b 	bl	800102c <HAL_GetTick>
 8002736:	0002      	movs	r2, r0
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	2b64      	cmp	r3, #100	; 0x64
 800273e:	d901      	bls.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x74>
        {
          return HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	e0e3      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x23c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002744:	4b74      	ldr	r3, [pc, #464]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	2380      	movs	r3, #128	; 0x80
 800274a:	005b      	lsls	r3, r3, #1
 800274c:	4013      	ands	r3, r2
 800274e:	d0f0      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x62>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002750:	4b70      	ldr	r3, [pc, #448]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	23c0      	movs	r3, #192	; 0xc0
 8002756:	039b      	lsls	r3, r3, #14
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	23c0      	movs	r3, #192	; 0xc0
 8002762:	039b      	lsls	r3, r3, #14
 8002764:	4013      	ands	r3, r2
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	429a      	cmp	r2, r3
 800276a:	d013      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xc4>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	23c0      	movs	r3, #192	; 0xc0
 8002772:	029b      	lsls	r3, r3, #10
 8002774:	401a      	ands	r2, r3
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	029b      	lsls	r3, r3, #10
 800277a:	429a      	cmp	r2, r3
 800277c:	d10a      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xc4>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800277e:	4b65      	ldr	r3, [pc, #404]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	2380      	movs	r3, #128	; 0x80
 8002784:	029b      	lsls	r3, r3, #10
 8002786:	401a      	ands	r2, r3
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	429a      	cmp	r2, r3
 800278e:	d101      	bne.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0xc4>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0bb      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x23c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002794:	4b5f      	ldr	r3, [pc, #380]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002796:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002798:	23c0      	movs	r3, #192	; 0xc0
 800279a:	029b      	lsls	r3, r3, #10
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d03b      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685a      	ldr	r2, [r3, #4]
 80027aa:	23c0      	movs	r3, #192	; 0xc0
 80027ac:	029b      	lsls	r3, r3, #10
 80027ae:	4013      	ands	r3, r2
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d033      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2220      	movs	r2, #32
 80027bc:	4013      	ands	r3, r2
 80027be:	d02e      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x14e>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 80027c0:	4b54      	ldr	r3, [pc, #336]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c4:	4a55      	ldr	r2, [pc, #340]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027ca:	4b52      	ldr	r3, [pc, #328]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ce:	4b51      	ldr	r3, [pc, #324]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027d0:	2180      	movs	r1, #128	; 0x80
 80027d2:	0309      	lsls	r1, r1, #12
 80027d4:	430a      	orrs	r2, r1
 80027d6:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027d8:	4b4e      	ldr	r3, [pc, #312]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027dc:	4b4d      	ldr	r3, [pc, #308]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027de:	4950      	ldr	r1, [pc, #320]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80027e0:	400a      	ands	r2, r1
 80027e2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 80027e4:	4b4b      	ldr	r3, [pc, #300]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 80027ea:	68fa      	ldr	r2, [r7, #12]
 80027ec:	2380      	movs	r3, #128	; 0x80
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	4013      	ands	r3, r2
 80027f2:	d014      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027f4:	f7fe fc1a 	bl	800102c <HAL_GetTick>
 80027f8:	0003      	movs	r3, r0
 80027fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80027fc:	e009      	b.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x142>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7fe fc15 	bl	800102c <HAL_GetTick>
 8002802:	0002      	movs	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	4a46      	ldr	r2, [pc, #280]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d901      	bls.n	8002812 <HAL_RCCEx_PeriphCLKConfig+0x142>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e07c      	b.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x23c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002812:	4b40      	ldr	r3, [pc, #256]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002814:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002816:	2380      	movs	r3, #128	; 0x80
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4013      	ands	r3, r2
 800281c:	d0ef      	beq.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x12e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	23c0      	movs	r3, #192	; 0xc0
 8002824:	029b      	lsls	r3, r3, #10
 8002826:	401a      	ands	r2, r3
 8002828:	23c0      	movs	r3, #192	; 0xc0
 800282a:	029b      	lsls	r3, r3, #10
 800282c:	429a      	cmp	r2, r3
 800282e:	d10c      	bne.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8002830:	4b38      	ldr	r3, [pc, #224]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a3c      	ldr	r2, [pc, #240]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002836:	4013      	ands	r3, r2
 8002838:	0019      	movs	r1, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685a      	ldr	r2, [r3, #4]
 800283e:	23c0      	movs	r3, #192	; 0xc0
 8002840:	039b      	lsls	r3, r3, #14
 8002842:	401a      	ands	r2, r3
 8002844:	4b33      	ldr	r3, [pc, #204]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002846:	430a      	orrs	r2, r1
 8002848:	601a      	str	r2, [r3, #0]
 800284a:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800284c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	029b      	lsls	r3, r3, #10
 8002856:	401a      	ands	r2, r3
 8002858:	4b2e      	ldr	r3, [pc, #184]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800285a:	430a      	orrs	r2, r1
 800285c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800285e:	2317      	movs	r3, #23
 8002860:	18fb      	adds	r3, r7, r3
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d105      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002868:	4b2a      	ldr	r3, [pc, #168]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800286a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800286c:	4b29      	ldr	r3, [pc, #164]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800286e:	492f      	ldr	r1, [pc, #188]	; (800292c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002870:	400a      	ands	r2, r1
 8002872:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	2201      	movs	r2, #1
 800287a:	4013      	ands	r3, r2
 800287c:	d009      	beq.n	8002892 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800287e:	4b25      	ldr	r3, [pc, #148]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	2203      	movs	r2, #3
 8002884:	4393      	bics	r3, r2
 8002886:	0019      	movs	r1, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	4b21      	ldr	r3, [pc, #132]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800288e:	430a      	orrs	r2, r1
 8002890:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	2202      	movs	r2, #2
 8002898:	4013      	ands	r3, r2
 800289a:	d009      	beq.n	80028b0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800289c:	4b1d      	ldr	r3, [pc, #116]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800289e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a0:	220c      	movs	r2, #12
 80028a2:	4393      	bics	r3, r2
 80028a4:	0019      	movs	r1, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68da      	ldr	r2, [r3, #12]
 80028aa:	4b1a      	ldr	r3, [pc, #104]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028ac:	430a      	orrs	r2, r1
 80028ae:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2204      	movs	r2, #4
 80028b6:	4013      	ands	r3, r2
 80028b8:	d009      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x1fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028be:	4a1c      	ldr	r2, [pc, #112]	; (8002930 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691a      	ldr	r2, [r3, #16]
 80028c8:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	2208      	movs	r2, #8
 80028d4:	4013      	ands	r3, r2
 80028d6:	d009      	beq.n	80028ec <HAL_RCCEx_PeriphCLKConfig+0x21c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028dc:	4a15      	ldr	r2, [pc, #84]	; (8002934 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80028de:	4013      	ands	r3, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	695a      	ldr	r2, [r3, #20]
 80028e6:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028e8:	430a      	orrs	r2, r1
 80028ea:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2280      	movs	r2, #128	; 0x80
 80028f2:	4013      	ands	r3, r2
 80028f4:	d009      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80028f6:	4b07      	ldr	r3, [pc, #28]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028fa:	4a0f      	ldr	r2, [pc, #60]	; (8002938 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80028fc:	4013      	ands	r3, r2
 80028fe:	0019      	movs	r1, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699a      	ldr	r2, [r3, #24]
 8002904:	4b03      	ldr	r3, [pc, #12]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002906:	430a      	orrs	r2, r1
 8002908:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	0018      	movs	r0, r3
 800290e:	46bd      	mov	sp, r7
 8002910:	b006      	add	sp, #24
 8002912:	bd80      	pop	{r7, pc}
 8002914:	40021000 	.word	0x40021000
 8002918:	40007000 	.word	0x40007000
 800291c:	fffcffff 	.word	0xfffcffff
 8002920:	fff7ffff 	.word	0xfff7ffff
 8002924:	00001388 	.word	0x00001388
 8002928:	ffcfffff 	.word	0xffcfffff
 800292c:	efffffff 	.word	0xefffffff
 8002930:	fffff3ff 	.word	0xfffff3ff
 8002934:	ffffcfff 	.word	0xffffcfff
 8002938:	fff3ffff 	.word	0xfff3ffff

0800293c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e059      	b.n	8002a02 <HAL_SPI_Init+0xc6>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2200      	movs	r2, #0
 8002952:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2251      	movs	r2, #81	; 0x51
 8002958:	5c9b      	ldrb	r3, [r3, r2]
 800295a:	b2db      	uxtb	r3, r3
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2250      	movs	r2, #80	; 0x50
 8002964:	2100      	movs	r1, #0
 8002966:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	0018      	movs	r0, r3
 800296c:	f7fd ffda 	bl	8000924 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2251      	movs	r2, #81	; 0x51
 8002974:	2102      	movs	r1, #2
 8002976:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2140      	movs	r1, #64	; 0x40
 8002984:	438a      	bics	r2, r1
 8002986:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	431a      	orrs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6999      	ldr	r1, [r3, #24]
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	400b      	ands	r3, r1
 80029ae:	431a      	orrs	r2, r3
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	431a      	orrs	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	431a      	orrs	r2, r3
 80029bc:	0011      	movs	r1, r2
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	699b      	ldr	r3, [r3, #24]
 80029ce:	0c1b      	lsrs	r3, r3, #16
 80029d0:	2204      	movs	r2, #4
 80029d2:	4013      	ands	r3, r2
 80029d4:	0019      	movs	r1, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4907      	ldr	r1, [pc, #28]	; (8002a0c <HAL_SPI_Init+0xd0>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2251      	movs	r2, #81	; 0x51
 80029fc:	2101      	movs	r1, #1
 80029fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	fffff7ff 	.word	0xfffff7ff

08002a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e01e      	b.n	8002a60 <HAL_TIM_Base_Init+0x50>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2239      	movs	r2, #57	; 0x39
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2238      	movs	r2, #56	; 0x38
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fe f9a3 	bl	8000d84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2239      	movs	r2, #57	; 0x39
 8002a42:	2102      	movs	r1, #2
 8002a44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f000 f9d7 	bl	8002e04 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2239      	movs	r2, #57	; 0x39
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a5e:	2300      	movs	r3, #0
}
 8002a60:	0018      	movs	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b002      	add	sp, #8
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	691b      	ldr	r3, [r3, #16]
 8002a76:	2202      	movs	r2, #2
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b02      	cmp	r3, #2
 8002a7c:	d124      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	2202      	movs	r2, #2
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d11d      	bne.n	8002ac8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2203      	movs	r2, #3
 8002a92:	4252      	negs	r2, r2
 8002a94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	699b      	ldr	r3, [r3, #24]
 8002aa2:	2203      	movs	r2, #3
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	d004      	beq.n	8002ab2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 f992 	bl	8002dd4 <HAL_TIM_IC_CaptureCallback>
 8002ab0:	e007      	b.n	8002ac2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f000 f985 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	0018      	movs	r0, r3
 8002abe:	f000 f991 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2204      	movs	r2, #4
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d125      	bne.n	8002b22 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	2204      	movs	r2, #4
 8002ade:	4013      	ands	r3, r2
 8002ae0:	2b04      	cmp	r3, #4
 8002ae2:	d11e      	bne.n	8002b22 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2205      	movs	r2, #5
 8002aea:	4252      	negs	r2, r2
 8002aec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2202      	movs	r2, #2
 8002af2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	23c0      	movs	r3, #192	; 0xc0
 8002afc:	009b      	lsls	r3, r3, #2
 8002afe:	4013      	ands	r3, r2
 8002b00:	d004      	beq.n	8002b0c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	0018      	movs	r0, r3
 8002b06:	f000 f965 	bl	8002dd4 <HAL_TIM_IC_CaptureCallback>
 8002b0a:	e007      	b.n	8002b1c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	0018      	movs	r0, r3
 8002b10:	f000 f958 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	0018      	movs	r0, r3
 8002b18:	f000 f964 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	691b      	ldr	r3, [r3, #16]
 8002b28:	2208      	movs	r2, #8
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d124      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	68db      	ldr	r3, [r3, #12]
 8002b36:	2208      	movs	r2, #8
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b08      	cmp	r3, #8
 8002b3c:	d11d      	bne.n	8002b7a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2209      	movs	r2, #9
 8002b44:	4252      	negs	r2, r2
 8002b46:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2204      	movs	r2, #4
 8002b4c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	69db      	ldr	r3, [r3, #28]
 8002b54:	2203      	movs	r2, #3
 8002b56:	4013      	ands	r3, r2
 8002b58:	d004      	beq.n	8002b64 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 f939 	bl	8002dd4 <HAL_TIM_IC_CaptureCallback>
 8002b62:	e007      	b.n	8002b74 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	0018      	movs	r0, r3
 8002b68:	f000 f92c 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f938 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	691b      	ldr	r3, [r3, #16]
 8002b80:	2210      	movs	r2, #16
 8002b82:	4013      	ands	r3, r2
 8002b84:	2b10      	cmp	r3, #16
 8002b86:	d125      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2210      	movs	r2, #16
 8002b90:	4013      	ands	r3, r2
 8002b92:	2b10      	cmp	r3, #16
 8002b94:	d11e      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	2211      	movs	r2, #17
 8002b9c:	4252      	negs	r2, r2
 8002b9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2208      	movs	r2, #8
 8002ba4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69da      	ldr	r2, [r3, #28]
 8002bac:	23c0      	movs	r3, #192	; 0xc0
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	d004      	beq.n	8002bbe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	0018      	movs	r0, r3
 8002bb8:	f000 f90c 	bl	8002dd4 <HAL_TIM_IC_CaptureCallback>
 8002bbc:	e007      	b.n	8002bce <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	0018      	movs	r0, r3
 8002bc2:	f000 f8ff 	bl	8002dc4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	0018      	movs	r0, r3
 8002bca:	f000 f90b 	bl	8002de4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	2201      	movs	r2, #1
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d10f      	bne.n	8002c02 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	2201      	movs	r2, #1
 8002bea:	4013      	ands	r3, r2
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d108      	bne.n	8002c02 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	4252      	negs	r2, r2
 8002bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f000 f8d9 	bl	8002db4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	691b      	ldr	r3, [r3, #16]
 8002c08:	2240      	movs	r2, #64	; 0x40
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d10f      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	2240      	movs	r2, #64	; 0x40
 8002c18:	4013      	ands	r3, r2
 8002c1a:	2b40      	cmp	r3, #64	; 0x40
 8002c1c:	d108      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2241      	movs	r2, #65	; 0x41
 8002c24:	4252      	negs	r2, r2
 8002c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	0018      	movs	r0, r3
 8002c2c:	f000 f8e2 	bl	8002df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c30:	46c0      	nop			; (mov r8, r8)
 8002c32:	46bd      	mov	sp, r7
 8002c34:	b002      	add	sp, #8
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b084      	sub	sp, #16
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2238      	movs	r2, #56	; 0x38
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_TIM_ConfigClockSource+0x18>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e0ab      	b.n	8002da8 <HAL_TIM_ConfigClockSource+0x170>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2238      	movs	r2, #56	; 0x38
 8002c54:	2101      	movs	r1, #1
 8002c56:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2239      	movs	r2, #57	; 0x39
 8002c5c:	2102      	movs	r1, #2
 8002c5e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	2277      	movs	r2, #119	; 0x77
 8002c6c:	4393      	bics	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	4a4f      	ldr	r2, [pc, #316]	; (8002db0 <HAL_TIM_ConfigClockSource+0x178>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d100      	bne.n	8002c8a <HAL_TIM_ConfigClockSource+0x52>
 8002c88:	e06b      	b.n	8002d62 <HAL_TIM_ConfigClockSource+0x12a>
 8002c8a:	d80e      	bhi.n	8002caa <HAL_TIM_ConfigClockSource+0x72>
 8002c8c:	2b10      	cmp	r3, #16
 8002c8e:	d100      	bne.n	8002c92 <HAL_TIM_ConfigClockSource+0x5a>
 8002c90:	e077      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x14a>
 8002c92:	d803      	bhi.n	8002c9c <HAL_TIM_ConfigClockSource+0x64>
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d100      	bne.n	8002c9a <HAL_TIM_ConfigClockSource+0x62>
 8002c98:	e073      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x14a>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002c9a:	e07c      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d100      	bne.n	8002ca2 <HAL_TIM_ConfigClockSource+0x6a>
 8002ca0:	e06f      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x14a>
 8002ca2:	2b30      	cmp	r3, #48	; 0x30
 8002ca4:	d100      	bne.n	8002ca8 <HAL_TIM_ConfigClockSource+0x70>
 8002ca6:	e06c      	b.n	8002d82 <HAL_TIM_ConfigClockSource+0x14a>
      break;
 8002ca8:	e075      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002caa:	2b70      	cmp	r3, #112	; 0x70
 8002cac:	d00e      	beq.n	8002ccc <HAL_TIM_ConfigClockSource+0x94>
 8002cae:	d804      	bhi.n	8002cba <HAL_TIM_ConfigClockSource+0x82>
 8002cb0:	2b50      	cmp	r3, #80	; 0x50
 8002cb2:	d036      	beq.n	8002d22 <HAL_TIM_ConfigClockSource+0xea>
 8002cb4:	2b60      	cmp	r3, #96	; 0x60
 8002cb6:	d044      	beq.n	8002d42 <HAL_TIM_ConfigClockSource+0x10a>
      break;
 8002cb8:	e06d      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
  switch (sClockSourceConfig->ClockSource)
 8002cba:	2280      	movs	r2, #128	; 0x80
 8002cbc:	0152      	lsls	r2, r2, #5
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d068      	beq.n	8002d94 <HAL_TIM_ConfigClockSource+0x15c>
 8002cc2:	2280      	movs	r2, #128	; 0x80
 8002cc4:	0192      	lsls	r2, r2, #6
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d017      	beq.n	8002cfa <HAL_TIM_ConfigClockSource+0xc2>
      break;
 8002cca:	e064      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6818      	ldr	r0, [r3, #0]
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	6899      	ldr	r1, [r3, #8]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685a      	ldr	r2, [r3, #4]
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f000 f960 	bl	8002fa0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2277      	movs	r2, #119	; 0x77
 8002cec:	4313      	orrs	r3, r2
 8002cee:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68fa      	ldr	r2, [r7, #12]
 8002cf6:	609a      	str	r2, [r3, #8]
      break;
 8002cf8:	e04d      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ETR_SetConfig(htim->Instance,
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6899      	ldr	r1, [r3, #8]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f000 f949 	bl	8002fa0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	689a      	ldr	r2, [r3, #8]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2180      	movs	r1, #128	; 0x80
 8002d1a:	01c9      	lsls	r1, r1, #7
 8002d1c:	430a      	orrs	r2, r1
 8002d1e:	609a      	str	r2, [r3, #8]
      break;
 8002d20:	e039      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6818      	ldr	r0, [r3, #0]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6859      	ldr	r1, [r3, #4]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	001a      	movs	r2, r3
 8002d30:	f000 f8bc 	bl	8002eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2150      	movs	r1, #80	; 0x50
 8002d3a:	0018      	movs	r0, r3
 8002d3c:	f000 f916 	bl	8002f6c <TIM_ITRx_SetConfig>
      break;
 8002d40:	e029      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	6859      	ldr	r1, [r3, #4]
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	001a      	movs	r2, r3
 8002d50:	f000 f8da 	bl	8002f08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2160      	movs	r1, #96	; 0x60
 8002d5a:	0018      	movs	r0, r3
 8002d5c:	f000 f906 	bl	8002f6c <TIM_ITRx_SetConfig>
      break;
 8002d60:	e019      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6818      	ldr	r0, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68db      	ldr	r3, [r3, #12]
 8002d6e:	001a      	movs	r2, r3
 8002d70:	f000 f89c 	bl	8002eac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2140      	movs	r1, #64	; 0x40
 8002d7a:	0018      	movs	r0, r3
 8002d7c:	f000 f8f6 	bl	8002f6c <TIM_ITRx_SetConfig>
      break;
 8002d80:	e009      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	0019      	movs	r1, r3
 8002d8c:	0010      	movs	r0, r2
 8002d8e:	f000 f8ed 	bl	8002f6c <TIM_ITRx_SetConfig>
      break;
 8002d92:	e000      	b.n	8002d96 <HAL_TIM_ConfigClockSource+0x15e>
      break;
 8002d94:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2239      	movs	r2, #57	; 0x39
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2238      	movs	r2, #56	; 0x38
 8002da2:	2100      	movs	r1, #0
 8002da4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	0018      	movs	r0, r3
 8002daa:	46bd      	mov	sp, r7
 8002dac:	b004      	add	sp, #16
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	ffff00ff 	.word	0xffff00ff

08002db4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002dbc:	46c0      	nop			; (mov r8, r8)
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	b002      	add	sp, #8
 8002dc2:	bd80      	pop	{r7, pc}

08002dc4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002dcc:	46c0      	nop			; (mov r8, r8)
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	b002      	add	sp, #8
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ddc:	46c0      	nop			; (mov r8, r8)
 8002dde:	46bd      	mov	sp, r7
 8002de0:	b002      	add	sp, #8
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dec:	46c0      	nop			; (mov r8, r8)
 8002dee:	46bd      	mov	sp, r7
 8002df0:	b002      	add	sp, #8
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002dfc:	46c0      	nop			; (mov r8, r8)
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b002      	add	sp, #8
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b084      	sub	sp, #16
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
 8002e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	05db      	lsls	r3, r3, #23
 8002e1a:	429a      	cmp	r2, r3
 8002e1c:	d007      	beq.n	8002e2e <TIM_Base_SetConfig+0x2a>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a1f      	ldr	r2, [pc, #124]	; (8002ea0 <TIM_Base_SetConfig+0x9c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d003      	beq.n	8002e2e <TIM_Base_SetConfig+0x2a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <TIM_Base_SetConfig+0xa0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d108      	bne.n	8002e40 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2270      	movs	r2, #112	; 0x70
 8002e32:	4393      	bics	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e40:	687a      	ldr	r2, [r7, #4]
 8002e42:	2380      	movs	r3, #128	; 0x80
 8002e44:	05db      	lsls	r3, r3, #23
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d007      	beq.n	8002e5a <TIM_Base_SetConfig+0x56>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a14      	ldr	r2, [pc, #80]	; (8002ea0 <TIM_Base_SetConfig+0x9c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d003      	beq.n	8002e5a <TIM_Base_SetConfig+0x56>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <TIM_Base_SetConfig+0xa0>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d108      	bne.n	8002e6c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	4a12      	ldr	r2, [pc, #72]	; (8002ea8 <TIM_Base_SetConfig+0xa4>)
 8002e5e:	4013      	ands	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	68db      	ldr	r3, [r3, #12]
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2280      	movs	r2, #128	; 0x80
 8002e70:	4393      	bics	r3, r2
 8002e72:	001a      	movs	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2201      	movs	r2, #1
 8002e96:	615a      	str	r2, [r3, #20]
}
 8002e98:	46c0      	nop			; (mov r8, r8)
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	b004      	add	sp, #16
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	40010800 	.word	0x40010800
 8002ea4:	40011400 	.word	0x40011400
 8002ea8:	fffffcff 	.word	0xfffffcff

08002eac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b086      	sub	sp, #24
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6a1b      	ldr	r3, [r3, #32]
 8002ebc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a1b      	ldr	r3, [r3, #32]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	4393      	bics	r3, r2
 8002ec6:	001a      	movs	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	699b      	ldr	r3, [r3, #24]
 8002ed0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	22f0      	movs	r2, #240	; 0xf0
 8002ed6:	4393      	bics	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	693a      	ldr	r2, [r7, #16]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ee4:	697b      	ldr	r3, [r7, #20]
 8002ee6:	220a      	movs	r2, #10
 8002ee8:	4393      	bics	r3, r2
 8002eea:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002eec:	697a      	ldr	r2, [r7, #20]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	621a      	str	r2, [r3, #32]
}
 8002f00:	46c0      	nop			; (mov r8, r8)
 8002f02:	46bd      	mov	sp, r7
 8002f04:	b006      	add	sp, #24
 8002f06:	bd80      	pop	{r7, pc}

08002f08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	60f8      	str	r0, [r7, #12]
 8002f10:	60b9      	str	r1, [r7, #8]
 8002f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	2210      	movs	r2, #16
 8002f1a:	4393      	bics	r3, r2
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a1b      	ldr	r3, [r3, #32]
 8002f2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	4a0d      	ldr	r2, [pc, #52]	; (8002f68 <TIM_TI2_ConfigInputStage+0x60>)
 8002f32:	4013      	ands	r3, r2
 8002f34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	031b      	lsls	r3, r3, #12
 8002f3a:	697a      	ldr	r2, [r7, #20]
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	22a0      	movs	r2, #160	; 0xa0
 8002f44:	4393      	bics	r3, r2
 8002f46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	697a      	ldr	r2, [r7, #20]
 8002f56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	621a      	str	r2, [r3, #32]
}
 8002f5e:	46c0      	nop			; (mov r8, r8)
 8002f60:	46bd      	mov	sp, r7
 8002f62:	b006      	add	sp, #24
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	ffff0fff 	.word	0xffff0fff

08002f6c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2270      	movs	r2, #112	; 0x70
 8002f80:	4393      	bics	r3, r2
 8002f82:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	2207      	movs	r2, #7
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	609a      	str	r2, [r3, #8]
}
 8002f96:	46c0      	nop			; (mov r8, r8)
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	b004      	add	sp, #16
 8002f9c:	bd80      	pop	{r7, pc}
	...

08002fa0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
 8002fac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	4a09      	ldr	r2, [pc, #36]	; (8002fdc <TIM_ETR_SetConfig+0x3c>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	021a      	lsls	r2, r3, #8
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	609a      	str	r2, [r3, #8]
}
 8002fd4:	46c0      	nop			; (mov r8, r8)
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	b006      	add	sp, #24
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	ffff00ff 	.word	0xffff00ff

08002fe0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2238      	movs	r2, #56	; 0x38
 8002fee:	5c9b      	ldrb	r3, [r3, r2]
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d101      	bne.n	8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	e032      	b.n	800305e <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2238      	movs	r2, #56	; 0x38
 8002ffc:	2101      	movs	r1, #1
 8002ffe:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2239      	movs	r2, #57	; 0x39
 8003004:	2102      	movs	r1, #2
 8003006:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	689b      	ldr	r3, [r3, #8]
 8003016:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2270      	movs	r2, #112	; 0x70
 800301c:	4393      	bics	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68fa      	ldr	r2, [r7, #12]
 8003026:	4313      	orrs	r3, r2
 8003028:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2280      	movs	r2, #128	; 0x80
 800302e:	4393      	bics	r3, r2
 8003030:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	4313      	orrs	r3, r2
 800303a:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	68fa      	ldr	r2, [r7, #12]
 8003042:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2239      	movs	r2, #57	; 0x39
 8003050:	2101      	movs	r1, #1
 8003052:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2238      	movs	r2, #56	; 0x38
 8003058:	2100      	movs	r1, #0
 800305a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	0018      	movs	r0, r3
 8003060:	46bd      	mov	sp, r7
 8003062:	b004      	add	sp, #16
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e044      	b.n	8003104 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307e:	2b00      	cmp	r3, #0
 8003080:	d107      	bne.n	8003092 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2270      	movs	r2, #112	; 0x70
 8003086:	2100      	movs	r1, #0
 8003088:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	0018      	movs	r0, r3
 800308e:	f7fd ff01 	bl	8000e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2224      	movs	r2, #36	; 0x24
 8003096:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2101      	movs	r1, #1
 80030a4:	438a      	bics	r2, r1
 80030a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	0018      	movs	r0, r3
 80030ac:	f000 f966 	bl	800337c <UART_SetConfig>
 80030b0:	0003      	movs	r3, r0
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d101      	bne.n	80030ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e024      	b.n	8003104 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	0018      	movs	r0, r3
 80030c6:	f000 fc71 	bl	80039ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685a      	ldr	r2, [r3, #4]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	490d      	ldr	r1, [pc, #52]	; (800310c <HAL_UART_Init+0xa4>)
 80030d6:	400a      	ands	r2, r1
 80030d8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689a      	ldr	r2, [r3, #8]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	212a      	movs	r1, #42	; 0x2a
 80030e6:	438a      	bics	r2, r1
 80030e8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2101      	movs	r1, #1
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	0018      	movs	r0, r3
 80030fe:	f000 fd09 	bl	8003b14 <UART_CheckIdleState>
 8003102:	0003      	movs	r3, r0
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b002      	add	sp, #8
 800310a:	bd80      	pop	{r7, pc}
 800310c:	ffffb7ff 	.word	0xffffb7ff

08003110 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	220f      	movs	r2, #15
 8003134:	4013      	ands	r3, r2
 8003136:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d112      	bne.n	8003164 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	2220      	movs	r2, #32
 8003142:	4013      	ands	r3, r2
 8003144:	d00e      	beq.n	8003164 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	2220      	movs	r2, #32
 800314a:	4013      	ands	r3, r2
 800314c:	d00a      	beq.n	8003164 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003152:	2b00      	cmp	r3, #0
 8003154:	d100      	bne.n	8003158 <HAL_UART_IRQHandler+0x48>
 8003156:	e0f6      	b.n	8003346 <HAL_UART_IRQHandler+0x236>
      {
        huart->RxISR(huart);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800315c:	687a      	ldr	r2, [r7, #4]
 800315e:	0010      	movs	r0, r2
 8003160:	4798      	blx	r3
      }
      return;
 8003162:	e0f0      	b.n	8003346 <HAL_UART_IRQHandler+0x236>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d100      	bne.n	800316c <HAL_UART_IRQHandler+0x5c>
 800316a:	e0b8      	b.n	80032de <HAL_UART_IRQHandler+0x1ce>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	2201      	movs	r2, #1
 8003170:	4013      	ands	r3, r2
 8003172:	d105      	bne.n	8003180 <HAL_UART_IRQHandler+0x70>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	2390      	movs	r3, #144	; 0x90
 8003178:	005b      	lsls	r3, r3, #1
 800317a:	4013      	ands	r3, r2
 800317c:	d100      	bne.n	8003180 <HAL_UART_IRQHandler+0x70>
 800317e:	e0ae      	b.n	80032de <HAL_UART_IRQHandler+0x1ce>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2201      	movs	r2, #1
 8003184:	4013      	ands	r3, r2
 8003186:	d00e      	beq.n	80031a6 <HAL_UART_IRQHandler+0x96>
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	2380      	movs	r3, #128	; 0x80
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	4013      	ands	r3, r2
 8003190:	d009      	beq.n	80031a6 <HAL_UART_IRQHandler+0x96>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2201      	movs	r2, #1
 8003198:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800319e:	2201      	movs	r2, #1
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a6:	69fb      	ldr	r3, [r7, #28]
 80031a8:	2202      	movs	r2, #2
 80031aa:	4013      	ands	r3, r2
 80031ac:	d00d      	beq.n	80031ca <HAL_UART_IRQHandler+0xba>
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	2201      	movs	r2, #1
 80031b2:	4013      	ands	r3, r2
 80031b4:	d009      	beq.n	80031ca <HAL_UART_IRQHandler+0xba>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2202      	movs	r2, #2
 80031bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031c2:	2204      	movs	r2, #4
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2204      	movs	r2, #4
 80031ce:	4013      	ands	r3, r2
 80031d0:	d00d      	beq.n	80031ee <HAL_UART_IRQHandler+0xde>
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2201      	movs	r2, #1
 80031d6:	4013      	ands	r3, r2
 80031d8:	d009      	beq.n	80031ee <HAL_UART_IRQHandler+0xde>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2204      	movs	r2, #4
 80031e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e6:	2202      	movs	r2, #2
 80031e8:	431a      	orrs	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031ee:	69fb      	ldr	r3, [r7, #28]
 80031f0:	2208      	movs	r2, #8
 80031f2:	4013      	ands	r3, r2
 80031f4:	d011      	beq.n	800321a <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2220      	movs	r2, #32
 80031fa:	4013      	ands	r3, r2
 80031fc:	d103      	bne.n	8003206 <HAL_UART_IRQHandler+0xf6>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2201      	movs	r2, #1
 8003202:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003204:	d009      	beq.n	800321a <HAL_UART_IRQHandler+0x10a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2208      	movs	r2, #8
 800320c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003212:	2208      	movs	r2, #8
 8003214:	431a      	orrs	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d100      	bne.n	8003224 <HAL_UART_IRQHandler+0x114>
 8003222:	e092      	b.n	800334a <HAL_UART_IRQHandler+0x23a>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	2220      	movs	r2, #32
 8003228:	4013      	ands	r3, r2
 800322a:	d00c      	beq.n	8003246 <HAL_UART_IRQHandler+0x136>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2220      	movs	r2, #32
 8003230:	4013      	ands	r3, r2
 8003232:	d008      	beq.n	8003246 <HAL_UART_IRQHandler+0x136>
      {
        if (huart->RxISR != NULL)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003238:	2b00      	cmp	r3, #0
 800323a:	d004      	beq.n	8003246 <HAL_UART_IRQHandler+0x136>
        {
          huart->RxISR(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	0010      	movs	r0, r2
 8003244:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800324a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2240      	movs	r2, #64	; 0x40
 8003254:	4013      	ands	r3, r2
 8003256:	2b40      	cmp	r3, #64	; 0x40
 8003258:	d003      	beq.n	8003262 <HAL_UART_IRQHandler+0x152>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2208      	movs	r2, #8
 800325e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003260:	d033      	beq.n	80032ca <HAL_UART_IRQHandler+0x1ba>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	0018      	movs	r0, r3
 8003266:	f000 fce5 	bl	8003c34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	2240      	movs	r2, #64	; 0x40
 8003272:	4013      	ands	r3, r2
 8003274:	2b40      	cmp	r3, #64	; 0x40
 8003276:	d123      	bne.n	80032c0 <HAL_UART_IRQHandler+0x1b0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	2140      	movs	r1, #64	; 0x40
 8003284:	438a      	bics	r2, r1
 8003286:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800328c:	2b00      	cmp	r3, #0
 800328e:	d012      	beq.n	80032b6 <HAL_UART_IRQHandler+0x1a6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003294:	4a30      	ldr	r2, [pc, #192]	; (8003358 <HAL_UART_IRQHandler+0x248>)
 8003296:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800329c:	0018      	movs	r0, r3
 800329e:	f7fe f9c1 	bl	8001624 <HAL_DMA_Abort_IT>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d019      	beq.n	80032da <HAL_UART_IRQHandler+0x1ca>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b0:	0018      	movs	r0, r3
 80032b2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b4:	e011      	b.n	80032da <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	0018      	movs	r0, r3
 80032ba:	f000 f857 	bl	800336c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032be:	e00c      	b.n	80032da <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	0018      	movs	r0, r3
 80032c4:	f000 f852 	bl	800336c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e007      	b.n	80032da <HAL_UART_IRQHandler+0x1ca>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 f84d 	bl	800336c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2200      	movs	r2, #0
 80032d6:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 80032d8:	e037      	b.n	800334a <HAL_UART_IRQHandler+0x23a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032da:	46c0      	nop			; (mov r8, r8)
    return;
 80032dc:	e035      	b.n	800334a <HAL_UART_IRQHandler+0x23a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80032de:	69fa      	ldr	r2, [r7, #28]
 80032e0:	2380      	movs	r3, #128	; 0x80
 80032e2:	035b      	lsls	r3, r3, #13
 80032e4:	4013      	ands	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_UART_IRQHandler+0x1f6>
 80032e8:	697a      	ldr	r2, [r7, #20]
 80032ea:	2380      	movs	r3, #128	; 0x80
 80032ec:	03db      	lsls	r3, r3, #15
 80032ee:	4013      	ands	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_UART_IRQHandler+0x1f6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2280      	movs	r2, #128	; 0x80
 80032f8:	0352      	lsls	r2, r2, #13
 80032fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	0018      	movs	r0, r3
 8003300:	f000 fce9 	bl	8003cd6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003304:	e024      	b.n	8003350 <HAL_UART_IRQHandler+0x240>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	2280      	movs	r2, #128	; 0x80
 800330a:	4013      	ands	r3, r2
 800330c:	d00d      	beq.n	800332a <HAL_UART_IRQHandler+0x21a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	4013      	ands	r3, r2
 8003314:	d009      	beq.n	800332a <HAL_UART_IRQHandler+0x21a>
  {
    if (huart->TxISR != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800331a:	2b00      	cmp	r3, #0
 800331c:	d017      	beq.n	800334e <HAL_UART_IRQHandler+0x23e>
    {
      huart->TxISR(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	0010      	movs	r0, r2
 8003326:	4798      	blx	r3
    }
    return;
 8003328:	e011      	b.n	800334e <HAL_UART_IRQHandler+0x23e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	2240      	movs	r2, #64	; 0x40
 800332e:	4013      	ands	r3, r2
 8003330:	d00e      	beq.n	8003350 <HAL_UART_IRQHandler+0x240>
 8003332:	69bb      	ldr	r3, [r7, #24]
 8003334:	2240      	movs	r2, #64	; 0x40
 8003336:	4013      	ands	r3, r2
 8003338:	d00a      	beq.n	8003350 <HAL_UART_IRQHandler+0x240>
  {
    UART_EndTransmit_IT(huart);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	0018      	movs	r0, r3
 800333e:	f000 fcb0 	bl	8003ca2 <UART_EndTransmit_IT>
    return;
 8003342:	46c0      	nop			; (mov r8, r8)
 8003344:	e004      	b.n	8003350 <HAL_UART_IRQHandler+0x240>
      return;
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	e002      	b.n	8003350 <HAL_UART_IRQHandler+0x240>
    return;
 800334a:	46c0      	nop			; (mov r8, r8)
 800334c:	e000      	b.n	8003350 <HAL_UART_IRQHandler+0x240>
    return;
 800334e:	46c0      	nop			; (mov r8, r8)
  }

}
 8003350:	46bd      	mov	sp, r7
 8003352:	b008      	add	sp, #32
 8003354:	bd80      	pop	{r7, pc}
 8003356:	46c0      	nop			; (mov r8, r8)
 8003358:	08003c75 	.word	0x08003c75

0800335c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003364:	46c0      	nop			; (mov r8, r8)
 8003366:	46bd      	mov	sp, r7
 8003368:	b002      	add	sp, #8
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003374:	46c0      	nop			; (mov r8, r8)
 8003376:	46bd      	mov	sp, r7
 8003378:	b002      	add	sp, #8
 800337a:	bd80      	pop	{r7, pc}

0800337c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800337c:	b5b0      	push	{r4, r5, r7, lr}
 800337e:	b08e      	sub	sp, #56	; 0x38
 8003380:	af00      	add	r7, sp, #0
 8003382:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003384:	231b      	movs	r3, #27
 8003386:	2218      	movs	r2, #24
 8003388:	4694      	mov	ip, r2
 800338a:	44bc      	add	ip, r7
 800338c:	4463      	add	r3, ip
 800338e:	2210      	movs	r2, #16
 8003390:	701a      	strb	r2, [r3, #0]
  uint32_t usartdiv                   = 0x00000000U;
 8003392:	2300      	movs	r3, #0
 8003394:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef ret               = HAL_OK;
 8003396:	2313      	movs	r3, #19
 8003398:	2218      	movs	r2, #24
 800339a:	4694      	mov	ip, r2
 800339c:	44bc      	add	ip, r7
 800339e:	4463      	add	r3, ip
 80033a0:	2200      	movs	r2, #0
 80033a2:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	689a      	ldr	r2, [r3, #8]
 80033ac:	69fb      	ldr	r3, [r7, #28]
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	431a      	orrs	r2, r3
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	695b      	ldr	r3, [r3, #20]
 80033b6:	431a      	orrs	r2, r3
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	69db      	ldr	r3, [r3, #28]
 80033bc:	4313      	orrs	r3, r2
 80033be:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4ac8      	ldr	r2, [pc, #800]	; (80036e8 <UART_SetConfig+0x36c>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	0019      	movs	r1, r3
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033d2:	430a      	orrs	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033d6:	69fb      	ldr	r3, [r7, #28]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4ac3      	ldr	r2, [pc, #780]	; (80036ec <UART_SetConfig+0x370>)
 80033de:	4013      	ands	r3, r2
 80033e0:	0019      	movs	r1, r3
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	68da      	ldr	r2, [r3, #12]
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	430a      	orrs	r2, r1
 80033ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4abd      	ldr	r2, [pc, #756]	; (80036f0 <UART_SetConfig+0x374>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d004      	beq.n	8003408 <UART_SetConfig+0x8c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	6a1b      	ldr	r3, [r3, #32]
 8003402:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003404:	4313      	orrs	r3, r2
 8003406:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	4ab9      	ldr	r2, [pc, #740]	; (80036f4 <UART_SetConfig+0x378>)
 8003410:	4013      	ands	r3, r2
 8003412:	0019      	movs	r1, r3
 8003414:	69fb      	ldr	r3, [r7, #28]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800341a:	430a      	orrs	r2, r1
 800341c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4ab5      	ldr	r2, [pc, #724]	; (80036f8 <UART_SetConfig+0x37c>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d134      	bne.n	8003492 <UART_SetConfig+0x116>
 8003428:	4bb4      	ldr	r3, [pc, #720]	; (80036fc <UART_SetConfig+0x380>)
 800342a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800342c:	2203      	movs	r2, #3
 800342e:	4013      	ands	r3, r2
 8003430:	2b01      	cmp	r3, #1
 8003432:	d015      	beq.n	8003460 <UART_SetConfig+0xe4>
 8003434:	d304      	bcc.n	8003440 <UART_SetConfig+0xc4>
 8003436:	2b02      	cmp	r3, #2
 8003438:	d00a      	beq.n	8003450 <UART_SetConfig+0xd4>
 800343a:	2b03      	cmp	r3, #3
 800343c:	d018      	beq.n	8003470 <UART_SetConfig+0xf4>
 800343e:	e01f      	b.n	8003480 <UART_SetConfig+0x104>
 8003440:	231b      	movs	r3, #27
 8003442:	2218      	movs	r2, #24
 8003444:	4694      	mov	ip, r2
 8003446:	44bc      	add	ip, r7
 8003448:	4463      	add	r3, ip
 800344a:	2201      	movs	r2, #1
 800344c:	701a      	strb	r2, [r3, #0]
 800344e:	e0ab      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003450:	231b      	movs	r3, #27
 8003452:	2218      	movs	r2, #24
 8003454:	4694      	mov	ip, r2
 8003456:	44bc      	add	ip, r7
 8003458:	4463      	add	r3, ip
 800345a:	2202      	movs	r2, #2
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e0a3      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003460:	231b      	movs	r3, #27
 8003462:	2218      	movs	r2, #24
 8003464:	4694      	mov	ip, r2
 8003466:	44bc      	add	ip, r7
 8003468:	4463      	add	r3, ip
 800346a:	2204      	movs	r2, #4
 800346c:	701a      	strb	r2, [r3, #0]
 800346e:	e09b      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003470:	231b      	movs	r3, #27
 8003472:	2218      	movs	r2, #24
 8003474:	4694      	mov	ip, r2
 8003476:	44bc      	add	ip, r7
 8003478:	4463      	add	r3, ip
 800347a:	2208      	movs	r2, #8
 800347c:	701a      	strb	r2, [r3, #0]
 800347e:	e093      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003480:	231b      	movs	r3, #27
 8003482:	2218      	movs	r2, #24
 8003484:	4694      	mov	ip, r2
 8003486:	44bc      	add	ip, r7
 8003488:	4463      	add	r3, ip
 800348a:	2210      	movs	r2, #16
 800348c:	701a      	strb	r2, [r3, #0]
 800348e:	46c0      	nop			; (mov r8, r8)
 8003490:	e08a      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003492:	69fb      	ldr	r3, [r7, #28]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a9a      	ldr	r2, [pc, #616]	; (8003700 <UART_SetConfig+0x384>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d137      	bne.n	800350c <UART_SetConfig+0x190>
 800349c:	4b97      	ldr	r3, [pc, #604]	; (80036fc <UART_SetConfig+0x380>)
 800349e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80034a0:	220c      	movs	r2, #12
 80034a2:	4013      	ands	r3, r2
 80034a4:	2b04      	cmp	r3, #4
 80034a6:	d018      	beq.n	80034da <UART_SetConfig+0x15e>
 80034a8:	d802      	bhi.n	80034b0 <UART_SetConfig+0x134>
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d005      	beq.n	80034ba <UART_SetConfig+0x13e>
 80034ae:	e024      	b.n	80034fa <UART_SetConfig+0x17e>
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d00a      	beq.n	80034ca <UART_SetConfig+0x14e>
 80034b4:	2b0c      	cmp	r3, #12
 80034b6:	d018      	beq.n	80034ea <UART_SetConfig+0x16e>
 80034b8:	e01f      	b.n	80034fa <UART_SetConfig+0x17e>
 80034ba:	231b      	movs	r3, #27
 80034bc:	2218      	movs	r2, #24
 80034be:	4694      	mov	ip, r2
 80034c0:	44bc      	add	ip, r7
 80034c2:	4463      	add	r3, ip
 80034c4:	2200      	movs	r2, #0
 80034c6:	701a      	strb	r2, [r3, #0]
 80034c8:	e06e      	b.n	80035a8 <UART_SetConfig+0x22c>
 80034ca:	231b      	movs	r3, #27
 80034cc:	2218      	movs	r2, #24
 80034ce:	4694      	mov	ip, r2
 80034d0:	44bc      	add	ip, r7
 80034d2:	4463      	add	r3, ip
 80034d4:	2202      	movs	r2, #2
 80034d6:	701a      	strb	r2, [r3, #0]
 80034d8:	e066      	b.n	80035a8 <UART_SetConfig+0x22c>
 80034da:	231b      	movs	r3, #27
 80034dc:	2218      	movs	r2, #24
 80034de:	4694      	mov	ip, r2
 80034e0:	44bc      	add	ip, r7
 80034e2:	4463      	add	r3, ip
 80034e4:	2204      	movs	r2, #4
 80034e6:	701a      	strb	r2, [r3, #0]
 80034e8:	e05e      	b.n	80035a8 <UART_SetConfig+0x22c>
 80034ea:	231b      	movs	r3, #27
 80034ec:	2218      	movs	r2, #24
 80034ee:	4694      	mov	ip, r2
 80034f0:	44bc      	add	ip, r7
 80034f2:	4463      	add	r3, ip
 80034f4:	2208      	movs	r2, #8
 80034f6:	701a      	strb	r2, [r3, #0]
 80034f8:	e056      	b.n	80035a8 <UART_SetConfig+0x22c>
 80034fa:	231b      	movs	r3, #27
 80034fc:	2218      	movs	r2, #24
 80034fe:	4694      	mov	ip, r2
 8003500:	44bc      	add	ip, r7
 8003502:	4463      	add	r3, ip
 8003504:	2210      	movs	r2, #16
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	e04d      	b.n	80035a8 <UART_SetConfig+0x22c>
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a77      	ldr	r2, [pc, #476]	; (80036f0 <UART_SetConfig+0x374>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d141      	bne.n	800359a <UART_SetConfig+0x21e>
 8003516:	4b79      	ldr	r3, [pc, #484]	; (80036fc <UART_SetConfig+0x380>)
 8003518:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800351a:	23c0      	movs	r3, #192	; 0xc0
 800351c:	011b      	lsls	r3, r3, #4
 800351e:	4013      	ands	r3, r2
 8003520:	2280      	movs	r2, #128	; 0x80
 8003522:	00d2      	lsls	r2, r2, #3
 8003524:	4293      	cmp	r3, r2
 8003526:	d01f      	beq.n	8003568 <UART_SetConfig+0x1ec>
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	00d2      	lsls	r2, r2, #3
 800352c:	4293      	cmp	r3, r2
 800352e:	d802      	bhi.n	8003536 <UART_SetConfig+0x1ba>
 8003530:	2b00      	cmp	r3, #0
 8003532:	d009      	beq.n	8003548 <UART_SetConfig+0x1cc>
 8003534:	e028      	b.n	8003588 <UART_SetConfig+0x20c>
 8003536:	2280      	movs	r2, #128	; 0x80
 8003538:	0112      	lsls	r2, r2, #4
 800353a:	4293      	cmp	r3, r2
 800353c:	d00c      	beq.n	8003558 <UART_SetConfig+0x1dc>
 800353e:	22c0      	movs	r2, #192	; 0xc0
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	4293      	cmp	r3, r2
 8003544:	d018      	beq.n	8003578 <UART_SetConfig+0x1fc>
 8003546:	e01f      	b.n	8003588 <UART_SetConfig+0x20c>
 8003548:	231b      	movs	r3, #27
 800354a:	2218      	movs	r2, #24
 800354c:	4694      	mov	ip, r2
 800354e:	44bc      	add	ip, r7
 8003550:	4463      	add	r3, ip
 8003552:	2200      	movs	r2, #0
 8003554:	701a      	strb	r2, [r3, #0]
 8003556:	e027      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003558:	231b      	movs	r3, #27
 800355a:	2218      	movs	r2, #24
 800355c:	4694      	mov	ip, r2
 800355e:	44bc      	add	ip, r7
 8003560:	4463      	add	r3, ip
 8003562:	2202      	movs	r2, #2
 8003564:	701a      	strb	r2, [r3, #0]
 8003566:	e01f      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003568:	231b      	movs	r3, #27
 800356a:	2218      	movs	r2, #24
 800356c:	4694      	mov	ip, r2
 800356e:	44bc      	add	ip, r7
 8003570:	4463      	add	r3, ip
 8003572:	2204      	movs	r2, #4
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e017      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003578:	231b      	movs	r3, #27
 800357a:	2218      	movs	r2, #24
 800357c:	4694      	mov	ip, r2
 800357e:	44bc      	add	ip, r7
 8003580:	4463      	add	r3, ip
 8003582:	2208      	movs	r2, #8
 8003584:	701a      	strb	r2, [r3, #0]
 8003586:	e00f      	b.n	80035a8 <UART_SetConfig+0x22c>
 8003588:	231b      	movs	r3, #27
 800358a:	2218      	movs	r2, #24
 800358c:	4694      	mov	ip, r2
 800358e:	44bc      	add	ip, r7
 8003590:	4463      	add	r3, ip
 8003592:	2210      	movs	r2, #16
 8003594:	701a      	strb	r2, [r3, #0]
 8003596:	46c0      	nop			; (mov r8, r8)
 8003598:	e006      	b.n	80035a8 <UART_SetConfig+0x22c>
 800359a:	231b      	movs	r3, #27
 800359c:	2218      	movs	r2, #24
 800359e:	4694      	mov	ip, r2
 80035a0:	44bc      	add	ip, r7
 80035a2:	4463      	add	r3, ip
 80035a4:	2210      	movs	r2, #16
 80035a6:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a50      	ldr	r2, [pc, #320]	; (80036f0 <UART_SetConfig+0x374>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d000      	beq.n	80035b4 <UART_SetConfig+0x238>
 80035b2:	e083      	b.n	80036bc <UART_SetConfig+0x340>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035b4:	231b      	movs	r3, #27
 80035b6:	2218      	movs	r2, #24
 80035b8:	4694      	mov	ip, r2
 80035ba:	44bc      	add	ip, r7
 80035bc:	4463      	add	r3, ip
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d00d      	beq.n	80035e0 <UART_SetConfig+0x264>
 80035c4:	dc02      	bgt.n	80035cc <UART_SetConfig+0x250>
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d005      	beq.n	80035d6 <UART_SetConfig+0x25a>
 80035ca:	e01d      	b.n	8003608 <UART_SetConfig+0x28c>
 80035cc:	2b04      	cmp	r3, #4
 80035ce:	d012      	beq.n	80035f6 <UART_SetConfig+0x27a>
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d015      	beq.n	8003600 <UART_SetConfig+0x284>
 80035d4:	e018      	b.n	8003608 <UART_SetConfig+0x28c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80035d6:	f7ff f84f 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 80035da:	0003      	movs	r3, r0
 80035dc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035de:	e01b      	b.n	8003618 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80035e0:	4b46      	ldr	r3, [pc, #280]	; (80036fc <UART_SetConfig+0x380>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2210      	movs	r2, #16
 80035e6:	4013      	ands	r3, r2
 80035e8:	d002      	beq.n	80035f0 <UART_SetConfig+0x274>
        {
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 80035ea:	4b46      	ldr	r3, [pc, #280]	; (8003704 <UART_SetConfig+0x388>)
 80035ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
        else
        {
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
        }
        break;
 80035ee:	e013      	b.n	8003618 <UART_SetConfig+0x29c>
          lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80035f0:	4b45      	ldr	r3, [pc, #276]	; (8003708 <UART_SetConfig+0x38c>)
 80035f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035f4:	e010      	b.n	8003618 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80035f6:	f7fe ffb1 	bl	800255c <HAL_RCC_GetSysClockFreq>
 80035fa:	0003      	movs	r3, r0
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80035fe:	e00b      	b.n	8003618 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8003600:	2380      	movs	r3, #128	; 0x80
 8003602:	021b      	lsls	r3, r3, #8
 8003604:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003606:	e007      	b.n	8003618 <UART_SetConfig+0x29c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003608:	2313      	movs	r3, #19
 800360a:	2218      	movs	r2, #24
 800360c:	4694      	mov	ip, r2
 800360e:	44bc      	add	ip, r7
 8003610:	4463      	add	r3, ip
 8003612:	2201      	movs	r2, #1
 8003614:	701a      	strb	r2, [r3, #0]
        break;
 8003616:	46c0      	nop			; (mov r8, r8)
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8003618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361a:	2b00      	cmp	r3, #0
 800361c:	d100      	bne.n	8003620 <UART_SetConfig+0x2a4>
 800361e:	e1a6      	b.n	800396e <UART_SetConfig+0x5f2>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	0013      	movs	r3, r2
 8003626:	005b      	lsls	r3, r3, #1
 8003628:	189b      	adds	r3, r3, r2
 800362a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800362c:	429a      	cmp	r2, r3
 800362e:	d305      	bcc.n	800363c <UART_SetConfig+0x2c0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003638:	429a      	cmp	r2, r3
 800363a:	d907      	bls.n	800364c <UART_SetConfig+0x2d0>
      {
        ret = HAL_ERROR;
 800363c:	2313      	movs	r3, #19
 800363e:	2218      	movs	r2, #24
 8003640:	4694      	mov	ip, r2
 8003642:	44bc      	add	ip, r7
 8003644:	4463      	add	r3, ip
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]
 800364a:	e190      	b.n	800396e <UART_SetConfig+0x5f2>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 800364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364e:	613b      	str	r3, [r7, #16]
 8003650:	2300      	movs	r3, #0
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	6939      	ldr	r1, [r7, #16]
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	000b      	movs	r3, r1
 800365a:	0e1b      	lsrs	r3, r3, #24
 800365c:	0010      	movs	r0, r2
 800365e:	0205      	lsls	r5, r0, #8
 8003660:	431d      	orrs	r5, r3
 8003662:	000b      	movs	r3, r1
 8003664:	021c      	lsls	r4, r3, #8
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	085b      	lsrs	r3, r3, #1
 800366c:	60bb      	str	r3, [r7, #8]
 800366e:	2300      	movs	r3, #0
 8003670:	60fb      	str	r3, [r7, #12]
 8003672:	68b8      	ldr	r0, [r7, #8]
 8003674:	68f9      	ldr	r1, [r7, #12]
 8003676:	1900      	adds	r0, r0, r4
 8003678:	4169      	adcs	r1, r5
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	2300      	movs	r3, #0
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f7fc fdca 	bl	8000220 <__aeabi_uldivmod>
 800368c:	0003      	movs	r3, r0
 800368e:	000c      	movs	r4, r1
 8003690:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003694:	4a1d      	ldr	r2, [pc, #116]	; (800370c <UART_SetConfig+0x390>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d908      	bls.n	80036ac <UART_SetConfig+0x330>
 800369a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800369c:	4a1c      	ldr	r2, [pc, #112]	; (8003710 <UART_SetConfig+0x394>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d804      	bhi.n	80036ac <UART_SetConfig+0x330>
        {
          huart->Instance->BRR = usartdiv;
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	e160      	b.n	800396e <UART_SetConfig+0x5f2>
        }
        else
        {
          ret = HAL_ERROR;
 80036ac:	2313      	movs	r3, #19
 80036ae:	2218      	movs	r2, #24
 80036b0:	4694      	mov	ip, r2
 80036b2:	44bc      	add	ip, r7
 80036b4:	4463      	add	r3, ip
 80036b6:	2201      	movs	r2, #1
 80036b8:	701a      	strb	r2, [r3, #0]
 80036ba:	e158      	b.n	800396e <UART_SetConfig+0x5f2>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	69da      	ldr	r2, [r3, #28]
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	021b      	lsls	r3, r3, #8
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d000      	beq.n	80036ca <UART_SetConfig+0x34e>
 80036c8:	e0c3      	b.n	8003852 <UART_SetConfig+0x4d6>
  {
    switch (clocksource)
 80036ca:	231b      	movs	r3, #27
 80036cc:	2218      	movs	r2, #24
 80036ce:	4694      	mov	ip, r2
 80036d0:	44bc      	add	ip, r7
 80036d2:	4463      	add	r3, ip
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	d900      	bls.n	80036dc <UART_SetConfig+0x360>
 80036da:	e086      	b.n	80037ea <UART_SetConfig+0x46e>
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	4b0d      	ldr	r3, [pc, #52]	; (8003714 <UART_SetConfig+0x398>)
 80036e0:	18d3      	adds	r3, r2, r3
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	469f      	mov	pc, r3
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	efff69f3 	.word	0xefff69f3
 80036ec:	ffffcfff 	.word	0xffffcfff
 80036f0:	40004800 	.word	0x40004800
 80036f4:	fffff4ff 	.word	0xfffff4ff
 80036f8:	40013800 	.word	0x40013800
 80036fc:	40021000 	.word	0x40021000
 8003700:	40004400 	.word	0x40004400
 8003704:	003d0900 	.word	0x003d0900
 8003708:	00f42400 	.word	0x00f42400
 800370c:	000002ff 	.word	0x000002ff
 8003710:	000fffff 	.word	0x000fffff
 8003714:	08003d7c 	.word	0x08003d7c
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003718:	f7fe ffae 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 800371c:	0003      	movs	r3, r0
 800371e:	005a      	lsls	r2, r3, #1
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	18d2      	adds	r2, r2, r3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	0019      	movs	r1, r3
 800372e:	0010      	movs	r0, r2
 8003730:	f7fc fcea 	bl	8000108 <__udivsi3>
 8003734:	0003      	movs	r3, r0
 8003736:	b29b      	uxth	r3, r3
 8003738:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800373a:	e05e      	b.n	80037fa <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800373c:	f7fe ffb2 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8003740:	0003      	movs	r3, r0
 8003742:	005a      	lsls	r2, r3, #1
 8003744:	69fb      	ldr	r3, [r7, #28]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	085b      	lsrs	r3, r3, #1
 800374a:	18d2      	adds	r2, r2, r3
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	0019      	movs	r1, r3
 8003752:	0010      	movs	r0, r2
 8003754:	f7fc fcd8 	bl	8000108 <__udivsi3>
 8003758:	0003      	movs	r3, r0
 800375a:	b29b      	uxth	r3, r3
 800375c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800375e:	e04c      	b.n	80037fa <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003760:	4b8b      	ldr	r3, [pc, #556]	; (8003990 <UART_SetConfig+0x614>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2210      	movs	r2, #16
 8003766:	4013      	ands	r3, r2
 8003768:	d00e      	beq.n	8003788 <UART_SetConfig+0x40c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	085b      	lsrs	r3, r3, #1
 8003770:	4a88      	ldr	r2, [pc, #544]	; (8003994 <UART_SetConfig+0x618>)
 8003772:	189a      	adds	r2, r3, r2
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	0019      	movs	r1, r3
 800377a:	0010      	movs	r0, r2
 800377c:	f7fc fcc4 	bl	8000108 <__udivsi3>
 8003780:	0003      	movs	r3, r0
 8003782:	b29b      	uxth	r3, r3
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 8003786:	e038      	b.n	80037fa <UART_SetConfig+0x47e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	085b      	lsrs	r3, r3, #1
 800378e:	4a82      	ldr	r2, [pc, #520]	; (8003998 <UART_SetConfig+0x61c>)
 8003790:	189a      	adds	r2, r3, r2
 8003792:	69fb      	ldr	r3, [r7, #28]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	0019      	movs	r1, r3
 8003798:	0010      	movs	r0, r2
 800379a:	f7fc fcb5 	bl	8000108 <__udivsi3>
 800379e:	0003      	movs	r3, r0
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037a4:	e029      	b.n	80037fa <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80037a6:	f7fe fed9 	bl	800255c <HAL_RCC_GetSysClockFreq>
 80037aa:	0003      	movs	r3, r0
 80037ac:	005a      	lsls	r2, r3, #1
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	18d2      	adds	r2, r2, r3
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	0019      	movs	r1, r3
 80037bc:	0010      	movs	r0, r2
 80037be:	f7fc fca3 	bl	8000108 <__udivsi3>
 80037c2:	0003      	movs	r3, r0
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037c8:	e017      	b.n	80037fa <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	085b      	lsrs	r3, r3, #1
 80037d0:	2280      	movs	r2, #128	; 0x80
 80037d2:	0252      	lsls	r2, r2, #9
 80037d4:	189a      	adds	r2, r3, r2
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	0019      	movs	r1, r3
 80037dc:	0010      	movs	r0, r2
 80037de:	f7fc fc93 	bl	8000108 <__udivsi3>
 80037e2:	0003      	movs	r3, r0
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80037e8:	e007      	b.n	80037fa <UART_SetConfig+0x47e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80037ea:	2313      	movs	r3, #19
 80037ec:	2218      	movs	r2, #24
 80037ee:	4694      	mov	ip, r2
 80037f0:	44bc      	add	ip, r7
 80037f2:	4463      	add	r3, ip
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
        break;
 80037f8:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037fc:	2b0f      	cmp	r3, #15
 80037fe:	d920      	bls.n	8003842 <UART_SetConfig+0x4c6>
 8003800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003802:	4a66      	ldr	r2, [pc, #408]	; (800399c <UART_SetConfig+0x620>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d81c      	bhi.n	8003842 <UART_SetConfig+0x4c6>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380a:	b29a      	uxth	r2, r3
 800380c:	200a      	movs	r0, #10
 800380e:	2418      	movs	r4, #24
 8003810:	193b      	adds	r3, r7, r4
 8003812:	181b      	adds	r3, r3, r0
 8003814:	210f      	movs	r1, #15
 8003816:	438a      	bics	r2, r1
 8003818:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800381a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800381c:	085b      	lsrs	r3, r3, #1
 800381e:	b29b      	uxth	r3, r3
 8003820:	2207      	movs	r2, #7
 8003822:	4013      	ands	r3, r2
 8003824:	b299      	uxth	r1, r3
 8003826:	193b      	adds	r3, r7, r4
 8003828:	181b      	adds	r3, r3, r0
 800382a:	193a      	adds	r2, r7, r4
 800382c:	1812      	adds	r2, r2, r0
 800382e:	8812      	ldrh	r2, [r2, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	193a      	adds	r2, r7, r4
 800383a:	1812      	adds	r2, r2, r0
 800383c:	8812      	ldrh	r2, [r2, #0]
 800383e:	60da      	str	r2, [r3, #12]
 8003840:	e095      	b.n	800396e <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8003842:	2313      	movs	r3, #19
 8003844:	2218      	movs	r2, #24
 8003846:	4694      	mov	ip, r2
 8003848:	44bc      	add	ip, r7
 800384a:	4463      	add	r3, ip
 800384c:	2201      	movs	r2, #1
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e08d      	b.n	800396e <UART_SetConfig+0x5f2>
    }
  }
  else
  {
    switch (clocksource)
 8003852:	231b      	movs	r3, #27
 8003854:	2218      	movs	r2, #24
 8003856:	4694      	mov	ip, r2
 8003858:	44bc      	add	ip, r7
 800385a:	4463      	add	r3, ip
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d86a      	bhi.n	8003938 <UART_SetConfig+0x5bc>
 8003862:	009a      	lsls	r2, r3, #2
 8003864:	4b4e      	ldr	r3, [pc, #312]	; (80039a0 <UART_SetConfig+0x624>)
 8003866:	18d3      	adds	r3, r2, r3
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800386c:	f7fe ff04 	bl	8002678 <HAL_RCC_GetPCLK1Freq>
 8003870:	0002      	movs	r2, r0
 8003872:	69fb      	ldr	r3, [r7, #28]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	18d2      	adds	r2, r2, r3
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	0019      	movs	r1, r3
 8003880:	0010      	movs	r0, r2
 8003882:	f7fc fc41 	bl	8000108 <__udivsi3>
 8003886:	0003      	movs	r3, r0
 8003888:	b29b      	uxth	r3, r3
 800388a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800388c:	e05c      	b.n	8003948 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800388e:	f7fe ff09 	bl	80026a4 <HAL_RCC_GetPCLK2Freq>
 8003892:	0002      	movs	r2, r0
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	085b      	lsrs	r3, r3, #1
 800389a:	18d2      	adds	r2, r2, r3
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	0019      	movs	r1, r3
 80038a2:	0010      	movs	r0, r2
 80038a4:	f7fc fc30 	bl	8000108 <__udivsi3>
 80038a8:	0003      	movs	r3, r0
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038ae:	e04b      	b.n	8003948 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038b0:	4b37      	ldr	r3, [pc, #220]	; (8003990 <UART_SetConfig+0x614>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	2210      	movs	r2, #16
 80038b6:	4013      	ands	r3, r2
 80038b8:	d00e      	beq.n	80038d8 <UART_SetConfig+0x55c>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	4a38      	ldr	r2, [pc, #224]	; (80039a4 <UART_SetConfig+0x628>)
 80038c2:	189a      	adds	r2, r3, r2
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	0019      	movs	r1, r3
 80038ca:	0010      	movs	r0, r2
 80038cc:	f7fc fc1c 	bl	8000108 <__udivsi3>
 80038d0:	0003      	movs	r3, r0
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
 80038d6:	e037      	b.n	8003948 <UART_SetConfig+0x5cc>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	085b      	lsrs	r3, r3, #1
 80038de:	4a32      	ldr	r2, [pc, #200]	; (80039a8 <UART_SetConfig+0x62c>)
 80038e0:	189a      	adds	r2, r3, r2
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	0019      	movs	r1, r3
 80038e8:	0010      	movs	r0, r2
 80038ea:	f7fc fc0d 	bl	8000108 <__udivsi3>
 80038ee:	0003      	movs	r3, r0
 80038f0:	b29b      	uxth	r3, r3
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80038f4:	e028      	b.n	8003948 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80038f6:	f7fe fe31 	bl	800255c <HAL_RCC_GetSysClockFreq>
 80038fa:	0002      	movs	r2, r0
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	18d2      	adds	r2, r2, r3
 8003904:	69fb      	ldr	r3, [r7, #28]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	0019      	movs	r1, r3
 800390a:	0010      	movs	r0, r2
 800390c:	f7fc fbfc 	bl	8000108 <__udivsi3>
 8003910:	0003      	movs	r3, r0
 8003912:	b29b      	uxth	r3, r3
 8003914:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003916:	e017      	b.n	8003948 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	085b      	lsrs	r3, r3, #1
 800391e:	2280      	movs	r2, #128	; 0x80
 8003920:	0212      	lsls	r2, r2, #8
 8003922:	189a      	adds	r2, r3, r2
 8003924:	69fb      	ldr	r3, [r7, #28]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	0019      	movs	r1, r3
 800392a:	0010      	movs	r0, r2
 800392c:	f7fc fbec 	bl	8000108 <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	b29b      	uxth	r3, r3
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003936:	e007      	b.n	8003948 <UART_SetConfig+0x5cc>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003938:	2313      	movs	r3, #19
 800393a:	2218      	movs	r2, #24
 800393c:	4694      	mov	ip, r2
 800393e:	44bc      	add	ip, r7
 8003940:	4463      	add	r3, ip
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
        break;
 8003946:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800394a:	2b0f      	cmp	r3, #15
 800394c:	d908      	bls.n	8003960 <UART_SetConfig+0x5e4>
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	4a12      	ldr	r2, [pc, #72]	; (800399c <UART_SetConfig+0x620>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d804      	bhi.n	8003960 <UART_SetConfig+0x5e4>
    {
      huart->Instance->BRR = usartdiv;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	e006      	b.n	800396e <UART_SetConfig+0x5f2>
    }
    else
    {
      ret = HAL_ERROR;
 8003960:	2313      	movs	r3, #19
 8003962:	2218      	movs	r2, #24
 8003964:	4694      	mov	ip, r2
 8003966:	44bc      	add	ip, r7
 8003968:	4463      	add	r3, ip
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	2200      	movs	r2, #0
 8003972:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	2200      	movs	r2, #0
 8003978:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800397a:	2313      	movs	r3, #19
 800397c:	2218      	movs	r2, #24
 800397e:	4694      	mov	ip, r2
 8003980:	44bc      	add	ip, r7
 8003982:	4463      	add	r3, ip
 8003984:	781b      	ldrb	r3, [r3, #0]
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	b00e      	add	sp, #56	; 0x38
 800398c:	bdb0      	pop	{r4, r5, r7, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	40021000 	.word	0x40021000
 8003994:	007a1200 	.word	0x007a1200
 8003998:	01e84800 	.word	0x01e84800
 800399c:	0000ffff 	.word	0x0000ffff
 80039a0:	08003da0 	.word	0x08003da0
 80039a4:	003d0900 	.word	0x003d0900
 80039a8:	00f42400 	.word	0x00f42400

080039ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b8:	2201      	movs	r2, #1
 80039ba:	4013      	ands	r3, r2
 80039bc:	d00b      	beq.n	80039d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	4a4a      	ldr	r2, [pc, #296]	; (8003af0 <UART_AdvFeatureConfig+0x144>)
 80039c6:	4013      	ands	r3, r2
 80039c8:	0019      	movs	r1, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	430a      	orrs	r2, r1
 80039d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	2202      	movs	r2, #2
 80039dc:	4013      	ands	r3, r2
 80039de:	d00b      	beq.n	80039f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	4a43      	ldr	r2, [pc, #268]	; (8003af4 <UART_AdvFeatureConfig+0x148>)
 80039e8:	4013      	ands	r3, r2
 80039ea:	0019      	movs	r1, r3
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	430a      	orrs	r2, r1
 80039f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039fc:	2204      	movs	r2, #4
 80039fe:	4013      	ands	r3, r2
 8003a00:	d00b      	beq.n	8003a1a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	4a3b      	ldr	r2, [pc, #236]	; (8003af8 <UART_AdvFeatureConfig+0x14c>)
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	0019      	movs	r1, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	430a      	orrs	r2, r1
 8003a18:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2208      	movs	r2, #8
 8003a20:	4013      	ands	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	4a34      	ldr	r2, [pc, #208]	; (8003afc <UART_AdvFeatureConfig+0x150>)
 8003a2c:	4013      	ands	r3, r2
 8003a2e:	0019      	movs	r1, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2210      	movs	r2, #16
 8003a42:	4013      	ands	r3, r2
 8003a44:	d00b      	beq.n	8003a5e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	4a2c      	ldr	r2, [pc, #176]	; (8003b00 <UART_AdvFeatureConfig+0x154>)
 8003a4e:	4013      	ands	r3, r2
 8003a50:	0019      	movs	r1, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	430a      	orrs	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a62:	2220      	movs	r2, #32
 8003a64:	4013      	ands	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	4a25      	ldr	r2, [pc, #148]	; (8003b04 <UART_AdvFeatureConfig+0x158>)
 8003a70:	4013      	ands	r3, r2
 8003a72:	0019      	movs	r1, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	430a      	orrs	r2, r1
 8003a7e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a84:	2240      	movs	r2, #64	; 0x40
 8003a86:	4013      	ands	r3, r2
 8003a88:	d01d      	beq.n	8003ac6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	4a1d      	ldr	r2, [pc, #116]	; (8003b08 <UART_AdvFeatureConfig+0x15c>)
 8003a92:	4013      	ands	r3, r2
 8003a94:	0019      	movs	r1, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	430a      	orrs	r2, r1
 8003aa0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	035b      	lsls	r3, r3, #13
 8003aaa:	429a      	cmp	r2, r3
 8003aac:	d10b      	bne.n	8003ac6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	4a15      	ldr	r2, [pc, #84]	; (8003b0c <UART_AdvFeatureConfig+0x160>)
 8003ab6:	4013      	ands	r3, r2
 8003ab8:	0019      	movs	r1, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	430a      	orrs	r2, r1
 8003ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aca:	2280      	movs	r2, #128	; 0x80
 8003acc:	4013      	ands	r3, r2
 8003ace:	d00b      	beq.n	8003ae8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4a0e      	ldr	r2, [pc, #56]	; (8003b10 <UART_AdvFeatureConfig+0x164>)
 8003ad8:	4013      	ands	r3, r2
 8003ada:	0019      	movs	r1, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	605a      	str	r2, [r3, #4]
  }
}
 8003ae8:	46c0      	nop			; (mov r8, r8)
 8003aea:	46bd      	mov	sp, r7
 8003aec:	b002      	add	sp, #8
 8003aee:	bd80      	pop	{r7, pc}
 8003af0:	fffdffff 	.word	0xfffdffff
 8003af4:	fffeffff 	.word	0xfffeffff
 8003af8:	fffbffff 	.word	0xfffbffff
 8003afc:	ffff7fff 	.word	0xffff7fff
 8003b00:	ffffefff 	.word	0xffffefff
 8003b04:	ffffdfff 	.word	0xffffdfff
 8003b08:	ffefffff 	.word	0xffefffff
 8003b0c:	ff9fffff 	.word	0xff9fffff
 8003b10:	fff7ffff 	.word	0xfff7ffff

08003b14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003b22:	f7fd fa83 	bl	800102c <HAL_GetTick>
 8003b26:	0003      	movs	r3, r0
 8003b28:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2208      	movs	r2, #8
 8003b32:	4013      	ands	r3, r2
 8003b34:	2b08      	cmp	r3, #8
 8003b36:	d10d      	bne.n	8003b54 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b38:	68fa      	ldr	r2, [r7, #12]
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	0399      	lsls	r1, r3, #14
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	4b16      	ldr	r3, [pc, #88]	; (8003b9c <UART_CheckIdleState+0x88>)
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	0013      	movs	r3, r2
 8003b46:	2200      	movs	r2, #0
 8003b48:	f000 f82a 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d001      	beq.n	8003b54 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e01f      	b.n	8003b94 <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2204      	movs	r2, #4
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d10d      	bne.n	8003b7e <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	2380      	movs	r3, #128	; 0x80
 8003b66:	03d9      	lsls	r1, r3, #15
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <UART_CheckIdleState+0x88>)
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	0013      	movs	r3, r2
 8003b70:	2200      	movs	r2, #0
 8003b72:	f000 f815 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003b76:	1e03      	subs	r3, r0, #0
 8003b78:	d001      	beq.n	8003b7e <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e00a      	b.n	8003b94 <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2270      	movs	r2, #112	; 0x70
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	01ffffff 	.word	0x01ffffff

08003ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	1dfb      	adds	r3, r7, #7
 8003bae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb0:	e029      	b.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	d026      	beq.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb8:	f7fd fa38 	bl	800102c <HAL_GetTick>
 8003bbc:	0002      	movs	r2, r0
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	69ba      	ldr	r2, [r7, #24]
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d11b      	bne.n	8003c06 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4915      	ldr	r1, [pc, #84]	; (8003c30 <UART_WaitOnFlagUntilTimeout+0x90>)
 8003bda:	400a      	ands	r2, r1
 8003bdc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	689a      	ldr	r2, [r3, #8]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2101      	movs	r1, #1
 8003bea:	438a      	bics	r2, r1
 8003bec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2220      	movs	r2, #32
 8003bf8:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2270      	movs	r2, #112	; 0x70
 8003bfe:	2100      	movs	r1, #0
 8003c00:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e00f      	b.n	8003c26 <UART_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	69db      	ldr	r3, [r3, #28]
 8003c0c:	68ba      	ldr	r2, [r7, #8]
 8003c0e:	4013      	ands	r3, r2
 8003c10:	68ba      	ldr	r2, [r7, #8]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	425a      	negs	r2, r3
 8003c16:	4153      	adcs	r3, r2
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	001a      	movs	r2, r3
 8003c1c:	1dfb      	adds	r3, r7, #7
 8003c1e:	781b      	ldrb	r3, [r3, #0]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d0c6      	beq.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	0018      	movs	r0, r3
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	b004      	add	sp, #16
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	fffffe5f 	.word	0xfffffe5f

08003c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	490a      	ldr	r1, [pc, #40]	; (8003c70 <UART_EndRxTransfer+0x3c>)
 8003c48:	400a      	ands	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2101      	movs	r1, #1
 8003c58:	438a      	bics	r2, r1
 8003c5a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2220      	movs	r2, #32
 8003c60:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2200      	movs	r2, #0
 8003c66:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003c68:	46c0      	nop			; (mov r8, r8)
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	b002      	add	sp, #8
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	fffffedf 	.word	0xfffffedf

08003c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	225a      	movs	r2, #90	; 0x5a
 8003c86:	2100      	movs	r1, #0
 8003c88:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	2252      	movs	r2, #82	; 0x52
 8003c8e:	2100      	movs	r1, #0
 8003c90:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	0018      	movs	r0, r3
 8003c96:	f7ff fb69 	bl	800336c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b004      	add	sp, #16
 8003ca0:	bd80      	pop	{r7, pc}

08003ca2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2140      	movs	r1, #64	; 0x40
 8003cb6:	438a      	bics	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2220      	movs	r2, #32
 8003cbe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	0018      	movs	r0, r3
 8003cca:	f7ff fb47 	bl	800335c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003cce:	46c0      	nop			; (mov r8, r8)
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	b002      	add	sp, #8
 8003cd4:	bd80      	pop	{r7, pc}

08003cd6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003cd6:	b580      	push	{r7, lr}
 8003cd8:	b082      	sub	sp, #8
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003cde:	46c0      	nop			; (mov r8, r8)
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b002      	add	sp, #8
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <__libc_init_array>:
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	2600      	movs	r6, #0
 8003cec:	4d0c      	ldr	r5, [pc, #48]	; (8003d20 <__libc_init_array+0x38>)
 8003cee:	4c0d      	ldr	r4, [pc, #52]	; (8003d24 <__libc_init_array+0x3c>)
 8003cf0:	1b64      	subs	r4, r4, r5
 8003cf2:	10a4      	asrs	r4, r4, #2
 8003cf4:	42a6      	cmp	r6, r4
 8003cf6:	d109      	bne.n	8003d0c <__libc_init_array+0x24>
 8003cf8:	2600      	movs	r6, #0
 8003cfa:	f000 f821 	bl	8003d40 <_init>
 8003cfe:	4d0a      	ldr	r5, [pc, #40]	; (8003d28 <__libc_init_array+0x40>)
 8003d00:	4c0a      	ldr	r4, [pc, #40]	; (8003d2c <__libc_init_array+0x44>)
 8003d02:	1b64      	subs	r4, r4, r5
 8003d04:	10a4      	asrs	r4, r4, #2
 8003d06:	42a6      	cmp	r6, r4
 8003d08:	d105      	bne.n	8003d16 <__libc_init_array+0x2e>
 8003d0a:	bd70      	pop	{r4, r5, r6, pc}
 8003d0c:	00b3      	lsls	r3, r6, #2
 8003d0e:	58eb      	ldr	r3, [r5, r3]
 8003d10:	4798      	blx	r3
 8003d12:	3601      	adds	r6, #1
 8003d14:	e7ee      	b.n	8003cf4 <__libc_init_array+0xc>
 8003d16:	00b3      	lsls	r3, r6, #2
 8003d18:	58eb      	ldr	r3, [r5, r3]
 8003d1a:	4798      	blx	r3
 8003d1c:	3601      	adds	r6, #1
 8003d1e:	e7f2      	b.n	8003d06 <__libc_init_array+0x1e>
 8003d20:	08003dcc 	.word	0x08003dcc
 8003d24:	08003dcc 	.word	0x08003dcc
 8003d28:	08003dcc 	.word	0x08003dcc
 8003d2c:	08003dd0 	.word	0x08003dd0

08003d30 <memset>:
 8003d30:	0003      	movs	r3, r0
 8003d32:	1812      	adds	r2, r2, r0
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d100      	bne.n	8003d3a <memset+0xa>
 8003d38:	4770      	bx	lr
 8003d3a:	7019      	strb	r1, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	e7f9      	b.n	8003d34 <memset+0x4>

08003d40 <_init>:
 8003d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d46:	bc08      	pop	{r3}
 8003d48:	469e      	mov	lr, r3
 8003d4a:	4770      	bx	lr

08003d4c <_fini>:
 8003d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d4e:	46c0      	nop			; (mov r8, r8)
 8003d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d52:	bc08      	pop	{r3}
 8003d54:	469e      	mov	lr, r3
 8003d56:	4770      	bx	lr
